{
  "version": 3,
  "file": "spec.js",
  "sources": [
    "spec/helpers/angular-mocks.js",
    "spec/helpers/helper.js",
    "spec/helpers/jasmine-fixture.js",
    "spec/helpers/jasmine-given.js",
    "spec/helpers/jasmine-only.js",
    "spec/helpers/jasmine-stealth.js",
    "spec/controllers/login_controller_spec.js",
    "spec/directives/shows_message_when_hovered_spec.js",
    "generated/js/spec.coffee.js"
  ],
  "names": [],
  "mappingsetv
  "sourcesContent": [
    "/**\r\n * @license AngularJS v1.3.8\r\n * (c) 2010-2014 Google, Inc. http://angularjs.org\r\n * License: MIT\r\n */\r\n(function(window, angular, undefined) {\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name angular.mock\r\n * @description\r\n *\r\n * Namespace from 'angular-mocks.js' which contains testing related code.\r\n */\r\nangular.mock = {};\r\n\r\n/**\r\n * ! This is a private undocumented service !\r\n *\r\n * @name $browser\r\n *\r\n * @description\r\n * This service is a mock implementation of {@link ng.$browser}. It provides fake\r\n * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,\r\n * cookies, etc...\r\n *\r\n * The api of this service is the same as that of the real {@link ng.$browser $browser}, except\r\n * that there are several helper methods available which can be used in tests.\r\n */\r\nangular.mock.$BrowserProvider = function() {\r\n  this.$get = function() {\r\n    return new angular.mock.$Browser();\r\n  };\r\n};\r\n\r\nangular.mock.$Browser = function() {\r\n  var self = this;\r\n\r\n  this.isMock = true;\r\n  self.$$url = \"http://server/\";\r\n  self.$$lastUrl = self.$$url; // used by url polling fn\r\n  self.pollFns = [];\r\n\r\n  // TODO(vojta): remove this temporary api\r\n  self.$$completeOutstandingRequest = angular.noop;\r\n  self.$$incOutstandingRequestCount = angular.noop;\r\n\r\n\r\n  // register url polling fn\r\n\r\n  self.onUrlChange = function(listener) {\r\n    self.pollFns.push(\r\n      function() {\r\n        if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {\r\n          self.$$lastUrl = self.$$url;\r\n          self.$$lastState = self.$$state;\r\n          listener(self.$$url, self.$$state);\r\n        }\r\n      }\r\n    );\r\n\r\n    return listener;\r\n  };\r\n\r\n  self.$$checkUrlChange = angular.noop;\r\n\r\n  self.cookieHash = {};\r\n  self.lastCookieHash = {};\r\n  self.deferredFns = [];\r\n  self.deferredNextId = 0;\r\n\r\n  self.defer = function(fn, delay) {\r\n    delay = delay || 0;\r\n    self.deferredFns.push({time:(self.defer.now + delay), fn:fn, id: self.deferredNextId});\r\n    self.deferredFns.sort(function(a, b) { return a.time - b.time;});\r\n    return self.deferredNextId++;\r\n  };\r\n\r\n\r\n  /**\r\n   * @name $browser#defer.now\r\n   *\r\n   * @description\r\n   * Current milliseconds mock time.\r\n   */\r\n  self.defer.now = 0;\r\n\r\n\r\n  self.defer.cancel = function(deferId) {\r\n    var fnIndex;\r\n\r\n    angular.forEach(self.deferredFns, function(fn, index) {\r\n      if (fn.id === deferId) fnIndex = index;\r\n    });\r\n\r\n    if (fnIndex !== undefined) {\r\n      self.deferredFns.splice(fnIndex, 1);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n\r\n  /**\r\n   * @name $browser#defer.flush\r\n   *\r\n   * @description\r\n   * Flushes all pending requests and executes the defer callbacks.\r\n   *\r\n   * @param {number=} number of milliseconds to flush. See {@link #defer.now}\r\n   */\r\n  self.defer.flush = function(delay) {\r\n    if (angular.isDefined(delay)) {\r\n      self.defer.now += delay;\r\n    } else {\r\n      if (self.deferredFns.length) {\r\n        self.defer.now = self.deferredFns[self.deferredFns.length - 1].time;\r\n      } else {\r\n        throw new Error('No deferred tasks to be flushed');\r\n      }\r\n    }\r\n\r\n    while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {\r\n      self.deferredFns.shift().fn();\r\n    }\r\n  };\r\n\r\n  self.$$baseHref = '/';\r\n  self.baseHref = function() {\r\n    return this.$$baseHref;\r\n  };\r\n};\r\nangular.mock.$Browser.prototype = {\r\n\r\n/**\r\n  * @name $browser#poll\r\n  *\r\n  * @description\r\n  * run all fns in pollFns\r\n  */\r\n  poll: function poll() {\r\n    angular.forEach(this.pollFns, function(pollFn) {\r\n      pollFn();\r\n    });\r\n  },\r\n\r\n  addPollFn: function(pollFn) {\r\n    this.pollFns.push(pollFn);\r\n    return pollFn;\r\n  },\r\n\r\n  url: function(url, replace, state) {\r\n    if (angular.isUndefined(state)) {\r\n      state = null;\r\n    }\r\n    if (url) {\r\n      this.$$url = url;\r\n      // Native pushState serializes & copies the object; simulate it.\r\n      this.$$state = angular.copy(state);\r\n      return this;\r\n    }\r\n\r\n    return this.$$url;\r\n  },\r\n\r\n  state: function() {\r\n    return this.$$state;\r\n  },\r\n\r\n  cookies:  function(name, value) {\r\n    if (name) {\r\n      if (angular.isUndefined(value)) {\r\n        delete this.cookieHash[name];\r\n      } else {\r\n        if (angular.isString(value) &&       //strings only\r\n            value.length <= 4096) {          //strict cookie storage limits\r\n          this.cookieHash[name] = value;\r\n        }\r\n      }\r\n    } else {\r\n      if (!angular.equals(this.cookieHash, this.lastCookieHash)) {\r\n        this.lastCookieHash = angular.copy(this.cookieHash);\r\n        this.cookieHash = angular.copy(this.cookieHash);\r\n      }\r\n      return this.cookieHash;\r\n    }\r\n  },\r\n\r\n  notifyWhenNoOutstandingRequests: function(fn) {\r\n    fn();\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @ngdoc provider\r\n * @name $exceptionHandlerProvider\r\n *\r\n * @description\r\n * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors\r\n * passed to the `$exceptionHandler`.\r\n */\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $exceptionHandler\r\n *\r\n * @description\r\n * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed\r\n * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration\r\n * information.\r\n *\r\n *\r\n * ```js\r\n *   describe('$exceptionHandlerProvider', function() {\r\n *\r\n *     it('should capture log messages and exceptions', function() {\r\n *\r\n *       module(function($exceptionHandlerProvider) {\r\n *         $exceptionHandlerProvider.mode('log');\r\n *       });\r\n *\r\n *       inject(function($log, $exceptionHandler, $timeout) {\r\n *         $timeout(function() { $log.log(1); });\r\n *         $timeout(function() { $log.log(2); throw 'banana peel'; });\r\n *         $timeout(function() { $log.log(3); });\r\n *         expect($exceptionHandler.errors).toEqual([]);\r\n *         expect($log.assertEmpty());\r\n *         $timeout.flush();\r\n *         expect($exceptionHandler.errors).toEqual(['banana peel']);\r\n *         expect($log.log.logs).toEqual([[1], [2], [3]]);\r\n *       });\r\n *     });\r\n *   });\r\n * ```\r\n */\r\n\r\nangular.mock.$ExceptionHandlerProvider = function() {\r\n  var handler;\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $exceptionHandlerProvider#mode\r\n   *\r\n   * @description\r\n   * Sets the logging mode.\r\n   *\r\n   * @param {string} mode Mode of operation, defaults to `rethrow`.\r\n   *\r\n   *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there\r\n   *                is a bug in the application or test, so this mock will make these tests fail.\r\n   *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`\r\n   *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later\r\n   *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and\r\n   *            {@link ngMock.$log#reset reset()}\r\n   */\r\n  this.mode = function(mode) {\r\n    switch (mode) {\r\n      case 'rethrow':\r\n        handler = function(e) {\r\n          throw e;\r\n        };\r\n        break;\r\n      case 'log':\r\n        var errors = [];\r\n\r\n        handler = function(e) {\r\n          if (arguments.length == 1) {\r\n            errors.push(e);\r\n          } else {\r\n            errors.push([].slice.call(arguments, 0));\r\n          }\r\n        };\r\n\r\n        handler.errors = errors;\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown mode '\" + mode + \"', only 'log'/'rethrow' modes are allowed!\");\r\n    }\r\n  };\r\n\r\n  this.$get = function() {\r\n    return handler;\r\n  };\r\n\r\n  this.mode('rethrow');\r\n};\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $log\r\n *\r\n * @description\r\n * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays\r\n * (one array per logging level). These arrays are exposed as `logs` property of each of the\r\n * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.\r\n *\r\n */\r\nangular.mock.$LogProvider = function() {\r\n  var debug = true;\r\n\r\n  function concat(array1, array2, index) {\r\n    return array1.concat(Array.prototype.slice.call(array2, index));\r\n  }\r\n\r\n  this.debugEnabled = function(flag) {\r\n    if (angular.isDefined(flag)) {\r\n      debug = flag;\r\n      return this;\r\n    } else {\r\n      return debug;\r\n    }\r\n  };\r\n\r\n  this.$get = function() {\r\n    var $log = {\r\n      log: function() { $log.log.logs.push(concat([], arguments, 0)); },\r\n      warn: function() { $log.warn.logs.push(concat([], arguments, 0)); },\r\n      info: function() { $log.info.logs.push(concat([], arguments, 0)); },\r\n      error: function() { $log.error.logs.push(concat([], arguments, 0)); },\r\n      debug: function() {\r\n        if (debug) {\r\n          $log.debug.logs.push(concat([], arguments, 0));\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name $log#reset\r\n     *\r\n     * @description\r\n     * Reset all of the logging arrays to empty.\r\n     */\r\n    $log.reset = function() {\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#log.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#log `log()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.log('Some Log');\r\n       * var first = $log.log.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.log.logs = [];\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#info.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#info `info()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.info('Some Info');\r\n       * var first = $log.info.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.info.logs = [];\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#warn.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#warn `warn()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.warn('Some Warning');\r\n       * var first = $log.warn.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.warn.logs = [];\r\n      /**\r\n       * @ngdoc property\r\n       * @name $log#error.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#error `error()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.error('Some Error');\r\n       * var first = $log.error.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.error.logs = [];\r\n        /**\r\n       * @ngdoc property\r\n       * @name $log#debug.logs\r\n       *\r\n       * @description\r\n       * Array of messages logged using {@link ng.$log#debug `debug()`}.\r\n       *\r\n       * @example\r\n       * ```js\r\n       * $log.debug('Some Error');\r\n       * var first = $log.debug.logs.unshift();\r\n       * ```\r\n       */\r\n      $log.debug.logs = [];\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name $log#assertEmpty\r\n     *\r\n     * @description\r\n     * Assert that all of the logging methods have no logged messages. If any messages are present,\r\n     * an exception is thrown.\r\n     */\r\n    $log.assertEmpty = function() {\r\n      var errors = [];\r\n      angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {\r\n        angular.forEach($log[logLevel].logs, function(log) {\r\n          angular.forEach(log, function(logItem) {\r\n            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\\n' +\r\n                        (logItem.stack || ''));\r\n          });\r\n        });\r\n      });\r\n      if (errors.length) {\r\n        errors.unshift(\"Expected $log to be empty! Either a message was logged unexpectedly, or \" +\r\n          \"an expected log message was not checked and removed:\");\r\n        errors.push('');\r\n        throw new Error(errors.join('\\n---------\\n'));\r\n      }\r\n    };\r\n\r\n    $log.reset();\r\n    return $log;\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $interval\r\n *\r\n * @description\r\n * Mock implementation of the $interval service.\r\n *\r\n * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to\r\n * move forward by `millis` milliseconds and trigger any functions scheduled to run in that\r\n * time.\r\n *\r\n * @param {function()} fn A function that should be called repeatedly.\r\n * @param {number} delay Number of milliseconds between each function call.\r\n * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat\r\n *   indefinitely.\r\n * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise\r\n *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.\r\n * @returns {promise} A promise which will be notified on each iteration.\r\n */\r\nangular.mock.$IntervalProvider = function() {\r\n  this.$get = ['$browser', '$rootScope', '$q', '$$q',\r\n       function($browser,   $rootScope,   $q,   $$q) {\r\n    var repeatFns = [],\r\n        nextRepeatId = 0,\r\n        now = 0;\r\n\r\n    var $interval = function(fn, delay, count, invokeApply) {\r\n      var iteration = 0,\r\n          skipApply = (angular.isDefined(invokeApply) && !invokeApply),\r\n          deferred = (skipApply ? $$q : $q).defer(),\r\n          promise = deferred.promise;\r\n\r\n      count = (angular.isDefined(count)) ? count : 0;\r\n      promise.then(null, null, fn);\r\n\r\n      promise.$$intervalId = nextRepeatId;\r\n\r\n      function tick() {\r\n        deferred.notify(iteration++);\r\n\r\n        if (count > 0 && iteration >= count) {\r\n          var fnIndex;\r\n          deferred.resolve(iteration);\r\n\r\n          angular.forEach(repeatFns, function(fn, index) {\r\n            if (fn.id === promise.$$intervalId) fnIndex = index;\r\n          });\r\n\r\n          if (fnIndex !== undefined) {\r\n            repeatFns.splice(fnIndex, 1);\r\n          }\r\n        }\r\n\r\n        if (skipApply) {\r\n          $browser.defer.flush();\r\n        } else {\r\n          $rootScope.$apply();\r\n        }\r\n      }\r\n\r\n      repeatFns.push({\r\n        nextTime:(now + delay),\r\n        delay: delay,\r\n        fn: tick,\r\n        id: nextRepeatId,\r\n        deferred: deferred\r\n      });\r\n      repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\r\n\r\n      nextRepeatId++;\r\n      return promise;\r\n    };\r\n    /**\r\n     * @ngdoc method\r\n     * @name $interval#cancel\r\n     *\r\n     * @description\r\n     * Cancels a task associated with the `promise`.\r\n     *\r\n     * @param {promise} promise A promise from calling the `$interval` function.\r\n     * @returns {boolean} Returns `true` if the task was successfully cancelled.\r\n     */\r\n    $interval.cancel = function(promise) {\r\n      if (!promise) return false;\r\n      var fnIndex;\r\n\r\n      angular.forEach(repeatFns, function(fn, index) {\r\n        if (fn.id === promise.$$intervalId) fnIndex = index;\r\n      });\r\n\r\n      if (fnIndex !== undefined) {\r\n        repeatFns[fnIndex].deferred.reject('canceled');\r\n        repeatFns.splice(fnIndex, 1);\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name $interval#flush\r\n     * @description\r\n     *\r\n     * Runs interval tasks scheduled to be run in the next `millis` milliseconds.\r\n     *\r\n     * @param {number=} millis maximum timeout amount to flush up until.\r\n     *\r\n     * @return {number} The amount of time moved forward.\r\n     */\r\n    $interval.flush = function(millis) {\r\n      now += millis;\r\n      while (repeatFns.length && repeatFns[0].nextTime <= now) {\r\n        var task = repeatFns[0];\r\n        task.fn();\r\n        task.nextTime += task.delay;\r\n        repeatFns.sort(function(a, b) { return a.nextTime - b.nextTime;});\r\n      }\r\n      return millis;\r\n    };\r\n\r\n    return $interval;\r\n  }];\r\n};\r\n\r\n\r\n/* jshint -W101 */\r\n/* The R_ISO8061_STR regex is never going to fit into the 100 char limit!\r\n * This directive should go inside the anonymous function but a bug in JSHint means that it would\r\n * not be enacted early enough to prevent the warning.\r\n */\r\nvar R_ISO8061_STR = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?:\\:?(\\d\\d)(?:\\:?(\\d\\d)(?:\\.(\\d{3}))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d)))?$/;\r\n\r\nfunction jsonStringToDate(string) {\r\n  var match;\r\n  if (match = string.match(R_ISO8061_STR)) {\r\n    var date = new Date(0),\r\n        tzHour = 0,\r\n        tzMin  = 0;\r\n    if (match[9]) {\r\n      tzHour = int(match[9] + match[10]);\r\n      tzMin = int(match[9] + match[11]);\r\n    }\r\n    date.setUTCFullYear(int(match[1]), int(match[2]) - 1, int(match[3]));\r\n    date.setUTCHours(int(match[4] || 0) - tzHour,\r\n                     int(match[5] || 0) - tzMin,\r\n                     int(match[6] || 0),\r\n                     int(match[7] || 0));\r\n    return date;\r\n  }\r\n  return string;\r\n}\r\n\r\nfunction int(str) {\r\n  return parseInt(str, 10);\r\n}\r\n\r\nfunction padNumber(num, digits, trim) {\r\n  var neg = '';\r\n  if (num < 0) {\r\n    neg =  '-';\r\n    num = -num;\r\n  }\r\n  num = '' + num;\r\n  while (num.length < digits) num = '0' + num;\r\n  if (trim)\r\n    num = num.substr(num.length - digits);\r\n  return neg + num;\r\n}\r\n\r\n\r\n/**\r\n * @ngdoc type\r\n * @name angular.mock.TzDate\r\n * @description\r\n *\r\n * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.\r\n *\r\n * Mock of the Date type which has its timezone specified via constructor arg.\r\n *\r\n * The main purpose is to create Date-like instances with timezone fixed to the specified timezone\r\n * offset, so that we can test code that depends on local timezone settings without dependency on\r\n * the time zone settings of the machine where the code is running.\r\n *\r\n * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)\r\n * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*\r\n *\r\n * @example\r\n * !!!! WARNING !!!!!\r\n * This is not a complete Date object so only methods that were implemented can be called safely.\r\n * To make matters worse, TzDate instances inherit stuff from Date via a prototype.\r\n *\r\n * We do our best to intercept calls to \"unimplemented\" methods, but since the list of methods is\r\n * incomplete we might be missing some non-standard methods. This can result in errors like:\r\n * \"Date.prototype.foo called on incompatible Object\".\r\n *\r\n * ```js\r\n * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');\r\n * newYearInBratislava.getTimezoneOffset() => -60;\r\n * newYearInBratislava.getFullYear() => 2010;\r\n * newYearInBratislava.getMonth() => 0;\r\n * newYearInBratislava.getDate() => 1;\r\n * newYearInBratislava.getHours() => 0;\r\n * newYearInBratislava.getMinutes() => 0;\r\n * newYearInBratislava.getSeconds() => 0;\r\n * ```\r\n *\r\n */\r\nangular.mock.TzDate = function(offset, timestamp) {\r\n  var self = new Date(0);\r\n  if (angular.isString(timestamp)) {\r\n    var tsStr = timestamp;\r\n\r\n    self.origDate = jsonStringToDate(timestamp);\r\n\r\n    timestamp = self.origDate.getTime();\r\n    if (isNaN(timestamp))\r\n      throw {\r\n        name: \"Illegal Argument\",\r\n        message: \"Arg '\" + tsStr + \"' passed into TzDate constructor is not a valid date string\"\r\n      };\r\n  } else {\r\n    self.origDate = new Date(timestamp);\r\n  }\r\n\r\n  var localOffset = new Date(timestamp).getTimezoneOffset();\r\n  self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;\r\n  self.date = new Date(timestamp + self.offsetDiff);\r\n\r\n  self.getTime = function() {\r\n    return self.date.getTime() - self.offsetDiff;\r\n  };\r\n\r\n  self.toLocaleDateString = function() {\r\n    return self.date.toLocaleDateString();\r\n  };\r\n\r\n  self.getFullYear = function() {\r\n    return self.date.getFullYear();\r\n  };\r\n\r\n  self.getMonth = function() {\r\n    return self.date.getMonth();\r\n  };\r\n\r\n  self.getDate = function() {\r\n    return self.date.getDate();\r\n  };\r\n\r\n  self.getHours = function() {\r\n    return self.date.getHours();\r\n  };\r\n\r\n  self.getMinutes = function() {\r\n    return self.date.getMinutes();\r\n  };\r\n\r\n  self.getSeconds = function() {\r\n    return self.date.getSeconds();\r\n  };\r\n\r\n  self.getMilliseconds = function() {\r\n    return self.date.getMilliseconds();\r\n  };\r\n\r\n  self.getTimezoneOffset = function() {\r\n    return offset * 60;\r\n  };\r\n\r\n  self.getUTCFullYear = function() {\r\n    return self.origDate.getUTCFullYear();\r\n  };\r\n\r\n  self.getUTCMonth = function() {\r\n    return self.origDate.getUTCMonth();\r\n  };\r\n\r\n  self.getUTCDate = function() {\r\n    return self.origDate.getUTCDate();\r\n  };\r\n\r\n  self.getUTCHours = function() {\r\n    return self.origDate.getUTCHours();\r\n  };\r\n\r\n  self.getUTCMinutes = function() {\r\n    return self.origDate.getUTCMinutes();\r\n  };\r\n\r\n  self.getUTCSeconds = function() {\r\n    return self.origDate.getUTCSeconds();\r\n  };\r\n\r\n  self.getUTCMilliseconds = function() {\r\n    return self.origDate.getUTCMilliseconds();\r\n  };\r\n\r\n  self.getDay = function() {\r\n    return self.date.getDay();\r\n  };\r\n\r\n  // provide this method only on browsers that already have it\r\n  if (self.toISOString) {\r\n    self.toISOString = function() {\r\n      return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +\r\n            padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +\r\n            padNumber(self.origDate.getUTCDate(), 2) + 'T' +\r\n            padNumber(self.origDate.getUTCHours(), 2) + ':' +\r\n            padNumber(self.origDate.getUTCMinutes(), 2) + ':' +\r\n            padNumber(self.origDate.getUTCSeconds(), 2) + '.' +\r\n            padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';\r\n    };\r\n  }\r\n\r\n  //hide all methods not implemented in this mock that the Date prototype exposes\r\n  var unimplementedMethods = ['getUTCDay',\r\n      'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',\r\n      'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',\r\n      'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',\r\n      'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',\r\n      'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'];\r\n\r\n  angular.forEach(unimplementedMethods, function(methodName) {\r\n    self[methodName] = function() {\r\n      throw new Error(\"Method '\" + methodName + \"' is not implemented in the TzDate mock\");\r\n    };\r\n  });\r\n\r\n  return self;\r\n};\r\n\r\n//make \"tzDateInstance instanceof Date\" return true\r\nangular.mock.TzDate.prototype = Date.prototype;\r\n/* jshint +W101 */\r\n\r\nangular.mock.animate = angular.module('ngAnimateMock', ['ng'])\r\n\r\n  .config(['$provide', function($provide) {\r\n\r\n    var reflowQueue = [];\r\n    $provide.value('$$animateReflow', function(fn) {\r\n      var index = reflowQueue.length;\r\n      reflowQueue.push(fn);\r\n      return function cancel() {\r\n        reflowQueue.splice(index, 1);\r\n      };\r\n    });\r\n\r\n    $provide.decorator('$animate', ['$delegate', '$$asyncCallback', '$timeout', '$browser',\r\n                            function($delegate,   $$asyncCallback,   $timeout,   $browser) {\r\n      var animate = {\r\n        queue: [],\r\n        cancel: $delegate.cancel,\r\n        enabled: $delegate.enabled,\r\n        triggerCallbackEvents: function() {\r\n          $$asyncCallback.flush();\r\n        },\r\n        triggerCallbackPromise: function() {\r\n          $timeout.flush(0);\r\n        },\r\n        triggerCallbacks: function() {\r\n          this.triggerCallbackEvents();\r\n          this.triggerCallbackPromise();\r\n        },\r\n        triggerReflow: function() {\r\n          angular.forEach(reflowQueue, function(fn) {\r\n            fn();\r\n          });\r\n          reflowQueue = [];\r\n        }\r\n      };\r\n\r\n      angular.forEach(\r\n        ['animate','enter','leave','move','addClass','removeClass','setClass'], function(method) {\r\n        animate[method] = function() {\r\n          animate.queue.push({\r\n            event: method,\r\n            element: arguments[0],\r\n            options: arguments[arguments.length - 1],\r\n            args: arguments\r\n          });\r\n          return $delegate[method].apply($delegate, arguments);\r\n        };\r\n      });\r\n\r\n      return animate;\r\n    }]);\r\n\r\n  }]);\r\n\r\n\r\n/**\r\n * @ngdoc function\r\n * @name angular.mock.dump\r\n * @description\r\n *\r\n * *NOTE*: this is not an injectable instance, just a globally available function.\r\n *\r\n * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for\r\n * debugging.\r\n *\r\n * This method is also available on window, where it can be used to display objects on debug\r\n * console.\r\n *\r\n * @param {*} object - any object to turn into string.\r\n * @return {string} a serialized string of the argument\r\n */\r\nangular.mock.dump = function(object) {\r\n  return serialize(object);\r\n\r\n  function serialize(object) {\r\n    var out;\r\n\r\n    if (angular.isElement(object)) {\r\n      object = angular.element(object);\r\n      out = angular.element('<div></div>');\r\n      angular.forEach(object, function(element) {\r\n        out.append(angular.element(element).clone());\r\n      });\r\n      out = out.html();\r\n    } else if (angular.isArray(object)) {\r\n      out = [];\r\n      angular.forEach(object, function(o) {\r\n        out.push(serialize(o));\r\n      });\r\n      out = '[ ' + out.join(', ') + ' ]';\r\n    } else if (angular.isObject(object)) {\r\n      if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {\r\n        out = serializeScope(object);\r\n      } else if (object instanceof Error) {\r\n        out = object.stack || ('' + object.name + ': ' + object.message);\r\n      } else {\r\n        // TODO(i): this prevents methods being logged,\r\n        // we should have a better way to serialize objects\r\n        out = angular.toJson(object, true);\r\n      }\r\n    } else {\r\n      out = String(object);\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function serializeScope(scope, offset) {\r\n    offset = offset ||  '  ';\r\n    var log = [offset + 'Scope(' + scope.$id + '): {'];\r\n    for (var key in scope) {\r\n      if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\\$|this)/)) {\r\n        log.push('  ' + key + ': ' + angular.toJson(scope[key]));\r\n      }\r\n    }\r\n    var child = scope.$$childHead;\r\n    while (child) {\r\n      log.push(serializeScope(child, offset + '  '));\r\n      child = child.$$nextSibling;\r\n    }\r\n    log.push('}');\r\n    return log.join('\\n' + offset);\r\n  }\r\n};\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $httpBackend\r\n * @description\r\n * Fake HTTP backend implementation suitable for unit testing applications that use the\r\n * {@link ng.$http $http service}.\r\n *\r\n * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less\r\n * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.\r\n *\r\n * During unit testing, we want our unit tests to run quickly and have no external dependencies so\r\n * we donâ€™t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or\r\n * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is\r\n * to verify whether a certain request has been sent or not, or alternatively just let the\r\n * application make requests, respond with pre-trained responses and assert that the end result is\r\n * what we expect it to be.\r\n *\r\n * This mock implementation can be used to respond with static or dynamic responses via the\r\n * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).\r\n *\r\n * When an Angular application needs some data from a server, it calls the $http service, which\r\n * sends the request to a real server using $httpBackend service. With dependency injection, it is\r\n * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify\r\n * the requests and respond with some testing data without sending a request to a real server.\r\n *\r\n * There are two ways to specify what test data should be returned as http responses by the mock\r\n * backend when the code under test makes http requests:\r\n *\r\n * - `$httpBackend.expect` - specifies a request expectation\r\n * - `$httpBackend.when` - specifies a backend definition\r\n *\r\n *\r\n * # Request Expectations vs Backend Definitions\r\n *\r\n * Request expectations provide a way to make assertions about requests made by the application and\r\n * to define responses for those requests. The test will fail if the expected requests are not made\r\n * or they are made in the wrong order.\r\n *\r\n * Backend definitions allow you to define a fake backend for your application which doesn't assert\r\n * if a particular request was made or not, it just returns a trained response if a request is made.\r\n * The test will pass whether or not the request gets made during testing.\r\n *\r\n *\r\n * <table class=\"table\">\r\n *   <tr><th width=\"220px\"></th><th>Request expectations</th><th>Backend definitions</th></tr>\r\n *   <tr>\r\n *     <th>Syntax</th>\r\n *     <td>.expect(...).respond(...)</td>\r\n *     <td>.when(...).respond(...)</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Typical usage</th>\r\n *     <td>strict unit tests</td>\r\n *     <td>loose (black-box) unit testing</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Fulfills multiple requests</th>\r\n *     <td>NO</td>\r\n *     <td>YES</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Order of requests matters</th>\r\n *     <td>YES</td>\r\n *     <td>NO</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Request required</th>\r\n *     <td>YES</td>\r\n *     <td>NO</td>\r\n *   </tr>\r\n *   <tr>\r\n *     <th>Response required</th>\r\n *     <td>optional (see below)</td>\r\n *     <td>YES</td>\r\n *   </tr>\r\n * </table>\r\n *\r\n * In cases where both backend definitions and request expectations are specified during unit\r\n * testing, the request expectations are evaluated first.\r\n *\r\n * If a request expectation has no response specified, the algorithm will search your backend\r\n * definitions for an appropriate response.\r\n *\r\n * If a request didn't match any expectation or if the expectation doesn't have the response\r\n * defined, the backend definitions are evaluated in sequential order to see if any of them match\r\n * the request. The response from the first matched definition is returned.\r\n *\r\n *\r\n * # Flushing HTTP requests\r\n *\r\n * The $httpBackend used in production always responds to requests asynchronously. If we preserved\r\n * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,\r\n * to follow and to maintain. But neither can the testing mock respond synchronously; that would\r\n * change the execution of the code under test. For this reason, the mock $httpBackend has a\r\n * `flush()` method, which allows the test to explicitly flush pending requests. This preserves\r\n * the async api of the backend, while allowing the test to execute synchronously.\r\n *\r\n *\r\n * # Unit testing with mock $httpBackend\r\n * The following code shows how to setup and use the mock backend when unit testing a controller.\r\n * First we create the controller under test:\r\n *\r\n  ```js\r\n  // The module code\r\n  angular\r\n    .module('MyApp', [])\r\n    .controller('MyController', MyController);\r\n\r\n  // The controller code\r\n  function MyController($scope, $http) {\r\n    var authToken;\r\n\r\n    $http.get('/auth.py').success(function(data, status, headers) {\r\n      authToken = headers('A-Token');\r\n      $scope.user = data;\r\n    });\r\n\r\n    $scope.saveMessage = function(message) {\r\n      var headers = { 'Authorization': authToken };\r\n      $scope.status = 'Saving...';\r\n\r\n      $http.post('/add-msg.py', message, { headers: headers } ).success(function(response) {\r\n        $scope.status = '';\r\n      }).error(function() {\r\n        $scope.status = 'ERROR!';\r\n      });\r\n    };\r\n  }\r\n  ```\r\n *\r\n * Now we setup the mock backend and create the test specs:\r\n *\r\n  ```js\r\n    // testing controller\r\n    describe('MyController', function() {\r\n       var $httpBackend, $rootScope, createController, authRequestHandler;\r\n\r\n       // Set up the module\r\n       beforeEach(module('MyApp'));\r\n\r\n       beforeEach(inject(function($injector) {\r\n         // Set up the mock http service responses\r\n         $httpBackend = $injector.get('$httpBackend');\r\n         // backend definition common for all tests\r\n         authRequestHandler = $httpBackend.when('GET', '/auth.py')\r\n                                .respond({userId: 'userX'}, {'A-Token': 'xxx'});\r\n\r\n         // Get hold of a scope (i.e. the root scope)\r\n         $rootScope = $injector.get('$rootScope');\r\n         // The $controller service is used to create instances of controllers\r\n         var $controller = $injector.get('$controller');\r\n\r\n         createController = function() {\r\n           return $controller('MyController', {'$scope' : $rootScope });\r\n         };\r\n       }));\r\n\r\n\r\n       afterEach(function() {\r\n         $httpBackend.verifyNoOutstandingExpectation();\r\n         $httpBackend.verifyNoOutstandingRequest();\r\n       });\r\n\r\n\r\n       it('should fetch authentication token', function() {\r\n         $httpBackend.expectGET('/auth.py');\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n       });\r\n\r\n\r\n       it('should fail authentication', function() {\r\n\r\n         // Notice how you can change the response even after it was set\r\n         authRequestHandler.respond(401, '');\r\n\r\n         $httpBackend.expectGET('/auth.py');\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n         expect($rootScope.status).toBe('Failed...');\r\n       });\r\n\r\n\r\n       it('should send msg to server', function() {\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n\r\n         // now you donâ€™t care about the authentication, but\r\n         // the controller will still send the request and\r\n         // $httpBackend will respond without you having to\r\n         // specify the expectation and response for this request\r\n\r\n         $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');\r\n         $rootScope.saveMessage('message content');\r\n         expect($rootScope.status).toBe('Saving...');\r\n         $httpBackend.flush();\r\n         expect($rootScope.status).toBe('');\r\n       });\r\n\r\n\r\n       it('should send auth header', function() {\r\n         var controller = createController();\r\n         $httpBackend.flush();\r\n\r\n         $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {\r\n           // check if the header was send, if it wasn't the expectation won't\r\n           // match the request and the test will fail\r\n           return headers['Authorization'] == 'xxx';\r\n         }).respond(201, '');\r\n\r\n         $rootScope.saveMessage('whatever');\r\n         $httpBackend.flush();\r\n       });\r\n    });\r\n   ```\r\n */\r\nangular.mock.$HttpBackendProvider = function() {\r\n  this.$get = ['$rootScope', '$timeout', createHttpBackendMock];\r\n};\r\n\r\n/**\r\n * General factory function for $httpBackend mock.\r\n * Returns instance for unit testing (when no arguments specified):\r\n *   - passing through is disabled\r\n *   - auto flushing is disabled\r\n *\r\n * Returns instance for e2e testing (when `$delegate` and `$browser` specified):\r\n *   - passing through (delegating request to real backend) is enabled\r\n *   - auto flushing is enabled\r\n *\r\n * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)\r\n * @param {Object=} $browser Auto-flushing enabled if specified\r\n * @return {Object} Instance of $httpBackend mock\r\n */\r\nfunction createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {\r\n  var definitions = [],\r\n      expectations = [],\r\n      responses = [],\r\n      responsesPush = angular.bind(responses, responses.push),\r\n      copy = angular.copy;\r\n\r\n  function createResponse(status, data, headers, statusText) {\r\n    if (angular.isFunction(status)) return status;\r\n\r\n    return function() {\r\n      return angular.isNumber(status)\r\n          ? [status, data, headers, statusText]\r\n          : [200, status, data, headers];\r\n    };\r\n  }\r\n\r\n  // TODO(vojta): change params to: method, url, data, headers, callback\r\n  function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {\r\n    var xhr = new MockXhr(),\r\n        expectation = expectations[0],\r\n        wasExpected = false;\r\n\r\n    function prettyPrint(data) {\r\n      return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp)\r\n          ? data\r\n          : angular.toJson(data);\r\n    }\r\n\r\n    function wrapResponse(wrapped) {\r\n      if (!$browser && timeout) {\r\n        timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);\r\n      }\r\n\r\n      return handleResponse;\r\n\r\n      function handleResponse() {\r\n        var response = wrapped.response(method, url, data, headers);\r\n        xhr.$$respHeaders = response[2];\r\n        callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),\r\n                 copy(response[3] || ''));\r\n      }\r\n\r\n      function handleTimeout() {\r\n        for (var i = 0, ii = responses.length; i < ii; i++) {\r\n          if (responses[i] === handleResponse) {\r\n            responses.splice(i, 1);\r\n            callback(-1, undefined, '');\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (expectation && expectation.match(method, url)) {\r\n      if (!expectation.matchData(data))\r\n        throw new Error('Expected ' + expectation + ' with different data\\n' +\r\n            'EXPECTED: ' + prettyPrint(expectation.data) + '\\nGOT:      ' + data);\r\n\r\n      if (!expectation.matchHeaders(headers))\r\n        throw new Error('Expected ' + expectation + ' with different headers\\n' +\r\n                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\\nGOT:      ' +\r\n                        prettyPrint(headers));\r\n\r\n      expectations.shift();\r\n\r\n      if (expectation.response) {\r\n        responses.push(wrapResponse(expectation));\r\n        return;\r\n      }\r\n      wasExpected = true;\r\n    }\r\n\r\n    var i = -1, definition;\r\n    while ((definition = definitions[++i])) {\r\n      if (definition.match(method, url, data, headers || {})) {\r\n        if (definition.response) {\r\n          // if $browser specified, we do auto flush all requests\r\n          ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));\r\n        } else if (definition.passThrough) {\r\n          $delegate(method, url, data, callback, headers, timeout, withCredentials);\r\n        } else throw new Error('No response defined !');\r\n        return;\r\n      }\r\n    }\r\n    throw wasExpected ?\r\n        new Error('No response defined !') :\r\n        new Error('Unexpected request: ' + method + ' ' + url + '\\n' +\r\n                  (expectation ? 'Expected ' + expectation : 'No more request expected'));\r\n  }\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#when\r\n   * @description\r\n   * Creates a new backend definition.\r\n   *\r\n   * @param {string} method HTTP method.\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\r\n   *   data string and returns true if the data is as expected.\r\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\r\n   *   object and returns true if the headers match the current definition.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   *\r\n   *  - respond â€“\r\n   *      `{function([status,] data[, headers, statusText])\r\n   *      | function(function(method, url, data, headers)}`\r\n   *    â€“ The respond method takes a set of static data to be returned or a function that can\r\n   *    return an array containing response status (number), response data (string), response\r\n   *    headers (Object), and the text for the status (string). The respond method returns the\r\n   *    `requestHandler` object for possible overrides.\r\n   */\r\n  $httpBackend.when = function(method, url, data, headers) {\r\n    var definition = new MockHttpExpectation(method, url, data, headers),\r\n        chain = {\r\n          respond: function(status, data, headers, statusText) {\r\n            definition.passThrough = undefined;\r\n            definition.response = createResponse(status, data, headers, statusText);\r\n            return chain;\r\n          }\r\n        };\r\n\r\n    if ($browser) {\r\n      chain.passThrough = function() {\r\n        definition.response = undefined;\r\n        definition.passThrough = true;\r\n        return chain;\r\n      };\r\n    }\r\n\r\n    definitions.push(definition);\r\n    return chain;\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenGET\r\n   * @description\r\n   * Creates a new backend definition for GET requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenHEAD\r\n   * @description\r\n   * Creates a new backend definition for HEAD requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenDELETE\r\n   * @description\r\n   * Creates a new backend definition for DELETE requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenPOST\r\n   * @description\r\n   * Creates a new backend definition for POST requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\r\n   *   data string and returns true if the data is as expected.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenPUT\r\n   * @description\r\n   * Creates a new backend definition for PUT requests.  For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives\r\n   *   data string and returns true if the data is as expected.\r\n   * @param {(Object|function(Object))=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#whenJSONP\r\n   * @description\r\n   * Creates a new backend definition for JSONP requests. For more info see `when()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled.\r\n   */\r\n  createShortMethods('when');\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expect\r\n   * @description\r\n   * Creates a new request expectation.\r\n   *\r\n   * @param {string} method HTTP method.\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\r\n   *   object and returns true if the headers match the current expectation.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *  request is handled. You can save this object for later use and invoke `respond` again in\r\n   *  order to change how a matched request is handled.\r\n   *\r\n   *  - respond â€“\r\n   *    `{function([status,] data[, headers, statusText])\r\n   *    | function(function(method, url, data, headers)}`\r\n   *    â€“ The respond method takes a set of static data to be returned or a function that can\r\n   *    return an array containing response status (number), response data (string), response\r\n   *    headers (Object), and the text for the status (string). The respond method returns the\r\n   *    `requestHandler` object for possible overrides.\r\n   */\r\n  $httpBackend.expect = function(method, url, data, headers) {\r\n    var expectation = new MockHttpExpectation(method, url, data, headers),\r\n        chain = {\r\n          respond: function(status, data, headers, statusText) {\r\n            expectation.response = createResponse(status, data, headers, statusText);\r\n            return chain;\r\n          }\r\n        };\r\n\r\n    expectations.push(expectation);\r\n    return chain;\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectGET\r\n   * @description\r\n   * Creates a new request expectation for GET requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   * request is handled. You can save this object for later use and invoke `respond` again in\r\n   * order to change how a matched request is handled. See #expect for more info.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectHEAD\r\n   * @description\r\n   * Creates a new request expectation for HEAD requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectDELETE\r\n   * @description\r\n   * Creates a new request expectation for DELETE requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectPOST\r\n   * @description\r\n   * Creates a new request expectation for POST requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectPUT\r\n   * @description\r\n   * Creates a new request expectation for PUT requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectPATCH\r\n   * @description\r\n   * Creates a new request expectation for PATCH requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that\r\n   *  receives data string and returns true if the data is as expected, or Object if request body\r\n   *  is in JSON format.\r\n   * @param {Object=} headers HTTP headers.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#expectJSONP\r\n   * @description\r\n   * Creates a new request expectation for JSONP requests. For more info see `expect()`.\r\n   *\r\n   * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n   *   and returns true if the url match the current definition.\r\n   * @returns {requestHandler} Returns an object with `respond` method that controls how a matched\r\n   *   request is handled. You can save this object for later use and invoke `respond` again in\r\n   *   order to change how a matched request is handled.\r\n   */\r\n  createShortMethods('expect');\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#flush\r\n   * @description\r\n   * Flushes all pending requests using the trained responses.\r\n   *\r\n   * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,\r\n   *   all pending requests will be flushed. If there are no pending requests when the flush method\r\n   *   is called an exception is thrown (as this typically a sign of programming error).\r\n   */\r\n  $httpBackend.flush = function(count, digest) {\r\n    if (digest !== false) $rootScope.$digest();\r\n    if (!responses.length) throw new Error('No pending request to flush !');\r\n\r\n    if (angular.isDefined(count) && count !== null) {\r\n      while (count--) {\r\n        if (!responses.length) throw new Error('No more pending request to flush !');\r\n        responses.shift()();\r\n      }\r\n    } else {\r\n      while (responses.length) {\r\n        responses.shift()();\r\n      }\r\n    }\r\n    $httpBackend.verifyNoOutstandingExpectation(digest);\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#verifyNoOutstandingExpectation\r\n   * @description\r\n   * Verifies that all of the requests defined via the `expect` api were made. If any of the\r\n   * requests were not made, verifyNoOutstandingExpectation throws an exception.\r\n   *\r\n   * Typically, you would call this method following each test case that asserts requests using an\r\n   * \"afterEach\" clause.\r\n   *\r\n   * ```js\r\n   *   afterEach($httpBackend.verifyNoOutstandingExpectation);\r\n   * ```\r\n   */\r\n  $httpBackend.verifyNoOutstandingExpectation = function(digest) {\r\n    if (digest !== false) $rootScope.$digest();\r\n    if (expectations.length) {\r\n      throw new Error('Unsatisfied requests: ' + expectations.join(', '));\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#verifyNoOutstandingRequest\r\n   * @description\r\n   * Verifies that there are no outstanding requests that need to be flushed.\r\n   *\r\n   * Typically, you would call this method following each test case that asserts requests using an\r\n   * \"afterEach\" clause.\r\n   *\r\n   * ```js\r\n   *   afterEach($httpBackend.verifyNoOutstandingRequest);\r\n   * ```\r\n   */\r\n  $httpBackend.verifyNoOutstandingRequest = function() {\r\n    if (responses.length) {\r\n      throw new Error('Unflushed requests: ' + responses.length);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $httpBackend#resetExpectations\r\n   * @description\r\n   * Resets all request expectations, but preserves all backend definitions. Typically, you would\r\n   * call resetExpectations during a multiple-phase test when you want to reuse the same instance of\r\n   * $httpBackend mock.\r\n   */\r\n  $httpBackend.resetExpectations = function() {\r\n    expectations.length = 0;\r\n    responses.length = 0;\r\n  };\r\n\r\n  return $httpBackend;\r\n\r\n\r\n  function createShortMethods(prefix) {\r\n    angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {\r\n     $httpBackend[prefix + method] = function(url, headers) {\r\n       return $httpBackend[prefix](method, url, undefined, headers);\r\n     };\r\n    });\r\n\r\n    angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {\r\n      $httpBackend[prefix + method] = function(url, data, headers) {\r\n        return $httpBackend[prefix](method, url, data, headers);\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\nfunction MockHttpExpectation(method, url, data, headers) {\r\n\r\n  this.data = data;\r\n  this.headers = headers;\r\n\r\n  this.match = function(m, u, d, h) {\r\n    if (method != m) return false;\r\n    if (!this.matchUrl(u)) return false;\r\n    if (angular.isDefined(d) && !this.matchData(d)) return false;\r\n    if (angular.isDefined(h) && !this.matchHeaders(h)) return false;\r\n    return true;\r\n  };\r\n\r\n  this.matchUrl = function(u) {\r\n    if (!url) return true;\r\n    if (angular.isFunction(url.test)) return url.test(u);\r\n    if (angular.isFunction(url)) return url(u);\r\n    return url == u;\r\n  };\r\n\r\n  this.matchHeaders = function(h) {\r\n    if (angular.isUndefined(headers)) return true;\r\n    if (angular.isFunction(headers)) return headers(h);\r\n    return angular.equals(headers, h);\r\n  };\r\n\r\n  this.matchData = function(d) {\r\n    if (angular.isUndefined(data)) return true;\r\n    if (data && angular.isFunction(data.test)) return data.test(d);\r\n    if (data && angular.isFunction(data)) return data(d);\r\n    if (data && !angular.isString(data)) {\r\n      return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));\r\n    }\r\n    return data == d;\r\n  };\r\n\r\n  this.toString = function() {\r\n    return method + ' ' + url;\r\n  };\r\n}\r\n\r\nfunction createMockXhr() {\r\n  return new MockXhr();\r\n}\r\n\r\nfunction MockXhr() {\r\n\r\n  // hack for testing $http, $httpBackend\r\n  MockXhr.$$lastInstance = this;\r\n\r\n  this.open = function(method, url, async) {\r\n    this.$$method = method;\r\n    this.$$url = url;\r\n    this.$$async = async;\r\n    this.$$reqHeaders = {};\r\n    this.$$respHeaders = {};\r\n  };\r\n\r\n  this.send = function(data) {\r\n    this.$$data = data;\r\n  };\r\n\r\n  this.setRequestHeader = function(key, value) {\r\n    this.$$reqHeaders[key] = value;\r\n  };\r\n\r\n  this.getResponseHeader = function(name) {\r\n    // the lookup must be case insensitive,\r\n    // that's why we try two quick lookups first and full scan last\r\n    var header = this.$$respHeaders[name];\r\n    if (header) return header;\r\n\r\n    name = angular.lowercase(name);\r\n    header = this.$$respHeaders[name];\r\n    if (header) return header;\r\n\r\n    header = undefined;\r\n    angular.forEach(this.$$respHeaders, function(headerVal, headerName) {\r\n      if (!header && angular.lowercase(headerName) == name) header = headerVal;\r\n    });\r\n    return header;\r\n  };\r\n\r\n  this.getAllResponseHeaders = function() {\r\n    var lines = [];\r\n\r\n    angular.forEach(this.$$respHeaders, function(value, key) {\r\n      lines.push(key + ': ' + value);\r\n    });\r\n    return lines.join('\\n');\r\n  };\r\n\r\n  this.abort = angular.noop;\r\n}\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $timeout\r\n * @description\r\n *\r\n * This service is just a simple decorator for {@link ng.$timeout $timeout} service\r\n * that adds a \"flush\" and \"verifyNoPendingTasks\" methods.\r\n */\r\n\r\nangular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $timeout#flush\r\n   * @description\r\n   *\r\n   * Flushes the queue of pending tasks.\r\n   *\r\n   * @param {number=} delay maximum timeout amount to flush up until\r\n   */\r\n  $delegate.flush = function(delay) {\r\n    $browser.defer.flush(delay);\r\n  };\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $timeout#verifyNoPendingTasks\r\n   * @description\r\n   *\r\n   * Verifies that there are no pending tasks that need to be flushed.\r\n   */\r\n  $delegate.verifyNoPendingTasks = function() {\r\n    if ($browser.deferredFns.length) {\r\n      throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +\r\n          formatPendingTasksAsString($browser.deferredFns));\r\n    }\r\n  };\r\n\r\n  function formatPendingTasksAsString(tasks) {\r\n    var result = [];\r\n    angular.forEach(tasks, function(task) {\r\n      result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');\r\n    });\r\n\r\n    return result.join(', ');\r\n  }\r\n\r\n  return $delegate;\r\n}];\r\n\r\nangular.mock.$RAFDecorator = ['$delegate', function($delegate) {\r\n  var queue = [];\r\n  var rafFn = function(fn) {\r\n    var index = queue.length;\r\n    queue.push(fn);\r\n    return function() {\r\n      queue.splice(index, 1);\r\n    };\r\n  };\r\n\r\n  rafFn.supported = $delegate.supported;\r\n\r\n  rafFn.flush = function() {\r\n    if (queue.length === 0) {\r\n      throw new Error('No rAF callbacks present');\r\n    }\r\n\r\n    var length = queue.length;\r\n    for (var i = 0; i < length; i++) {\r\n      queue[i]();\r\n    }\r\n\r\n    queue = [];\r\n  };\r\n\r\n  return rafFn;\r\n}];\r\n\r\nangular.mock.$AsyncCallbackDecorator = ['$delegate', function($delegate) {\r\n  var callbacks = [];\r\n  var addFn = function(fn) {\r\n    callbacks.push(fn);\r\n  };\r\n  addFn.flush = function() {\r\n    angular.forEach(callbacks, function(fn) {\r\n      fn();\r\n    });\r\n    callbacks = [];\r\n  };\r\n  return addFn;\r\n}];\r\n\r\n/**\r\n *\r\n */\r\nangular.mock.$RootElementProvider = function() {\r\n  this.$get = function() {\r\n    return angular.element('<div ng-app></div>');\r\n  };\r\n};\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngMock\r\n * @packageName angular-mocks\r\n * @description\r\n *\r\n * # ngMock\r\n *\r\n * The `ngMock` module provides support to inject and mock Angular services into unit tests.\r\n * In addition, ngMock also extends various core ng services such that they can be\r\n * inspected and controlled in a synchronous manner within test code.\r\n *\r\n *\r\n * <div doc-module-components=\"ngMock\"></div>\r\n *\r\n */\r\nangular.module('ngMock', ['ng']).provider({\r\n  $browser: angular.mock.$BrowserProvider,\r\n  $exceptionHandler: angular.mock.$ExceptionHandlerProvider,\r\n  $log: angular.mock.$LogProvider,\r\n  $interval: angular.mock.$IntervalProvider,\r\n  $httpBackend: angular.mock.$HttpBackendProvider,\r\n  $rootElement: angular.mock.$RootElementProvider\r\n}).config(['$provide', function($provide) {\r\n  $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);\r\n  $provide.decorator('$$rAF', angular.mock.$RAFDecorator);\r\n  $provide.decorator('$$asyncCallback', angular.mock.$AsyncCallbackDecorator);\r\n  $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);\r\n}]);\r\n\r\n/**\r\n * @ngdoc module\r\n * @name ngMockE2E\r\n * @module ngMockE2E\r\n * @packageName angular-mocks\r\n * @description\r\n *\r\n * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.\r\n * Currently there is only one mock present in this module -\r\n * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.\r\n */\r\nangular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {\r\n  $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);\r\n}]);\r\n\r\n/**\r\n * @ngdoc service\r\n * @name $httpBackend\r\n * @module ngMockE2E\r\n * @description\r\n * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of\r\n * applications that use the {@link ng.$http $http service}.\r\n *\r\n * *Note*: For fake http backend implementation suitable for unit testing please see\r\n * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.\r\n *\r\n * This implementation can be used to respond with static or dynamic responses via the `when` api\r\n * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the\r\n * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch\r\n * templates from a webserver).\r\n *\r\n * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application\r\n * is being developed with the real backend api replaced with a mock, it is often desirable for\r\n * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch\r\n * templates or static files from the webserver). To configure the backend with this behavior\r\n * use the `passThrough` request handler of `when` instead of `respond`.\r\n *\r\n * Additionally, we don't want to manually have to flush mocked out requests like we do during unit\r\n * testing. For this reason the e2e $httpBackend flushes mocked out requests\r\n * automatically, closely simulating the behavior of the XMLHttpRequest object.\r\n *\r\n * To setup the application to run with this http backend, you have to create a module that depends\r\n * on the `ngMockE2E` and your application modules and defines the fake backend:\r\n *\r\n * ```js\r\n *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);\r\n *   myAppDev.run(function($httpBackend) {\r\n *     phones = [{name: 'phone1'}, {name: 'phone2'}];\r\n *\r\n *     // returns the current list of phones\r\n *     $httpBackend.whenGET('/phones').respond(phones);\r\n *\r\n *     // adds a new phone to the phones array\r\n *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {\r\n *       var phone = angular.fromJson(data);\r\n *       phones.push(phone);\r\n *       return [200, phone, {}];\r\n *     });\r\n *     $httpBackend.whenGET(/^\\/templates\\//).passThrough();\r\n *     //...\r\n *   });\r\n * ```\r\n *\r\n * Afterwards, bootstrap your app with this new module.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#when\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition.\r\n *\r\n * @param {string} method HTTP method.\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header\r\n *   object and returns true if the headers match the current definition.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n *\r\n *  - respond â€“\r\n *    `{function([status,] data[, headers, statusText])\r\n *    | function(function(method, url, data, headers)}`\r\n *    â€“ The respond method takes a set of static data to be returned or a function that can return\r\n *    an array containing response status (number), response data (string), response headers\r\n *    (Object), and the text for the status (string).\r\n *  - passThrough â€“ `{function()}` â€“ Any request matching a backend definition with\r\n *    `passThrough` handler will be passed through to the real backend (an XHR request will be made\r\n *    to the server.)\r\n *  - Both methods return the `requestHandler` object for possible overrides.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenGET\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for GET requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenHEAD\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for HEAD requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenDELETE\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for DELETE requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenPOST\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for POST requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenPUT\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for PUT requests.  For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenPATCH\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for PATCH requests.  For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @param {(string|RegExp)=} data HTTP request body.\r\n * @param {(Object|function(Object))=} headers HTTP headers.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\n\r\n/**\r\n * @ngdoc method\r\n * @name $httpBackend#whenJSONP\r\n * @module ngMockE2E\r\n * @description\r\n * Creates a new backend definition for JSONP requests. For more info see `when()`.\r\n *\r\n * @param {string|RegExp|function(string)} url HTTP url or function that receives the url\r\n *   and returns true if the url match the current definition.\r\n * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that\r\n *   control how a matched request is handled. You can save this object for later use and invoke\r\n *   `respond` or `passThrough` again in order to change how a matched request is handled.\r\n */\r\nangular.mock.e2e = {};\r\nangular.mock.e2e.$httpBackendDecorator =\r\n  ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];\r\n\r\n\r\n/**\r\n * @ngdoc type\r\n * @name $rootScope.Scope\r\n * @module ngMock\r\n * @description\r\n * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These\r\n * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when\r\n * `ngMock` module is loaded.\r\n *\r\n * In addition to all the regular `Scope` methods, the following helper methods are available:\r\n */\r\nangular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {\r\n\r\n  var $rootScopePrototype = Object.getPrototypeOf($delegate);\r\n\r\n  $rootScopePrototype.$countChildScopes = countChildScopes;\r\n  $rootScopePrototype.$countWatchers = countWatchers;\r\n\r\n  return $delegate;\r\n\r\n  // ------------------------------------------------------------------------------------------ //\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $rootScope.Scope#$countChildScopes\r\n   * @module ngMock\r\n   * @description\r\n   * Counts all the direct and indirect child scopes of the current scope.\r\n   *\r\n   * The current scope is excluded from the count. The count includes all isolate child scopes.\r\n   *\r\n   * @returns {number} Total number of child scopes.\r\n   */\r\n  function countChildScopes() {\r\n    // jshint validthis: true\r\n    var count = 0; // exclude the current scope\r\n    var pendingChildHeads = [this.$$childHead];\r\n    var currentScope;\r\n\r\n    while (pendingChildHeads.length) {\r\n      currentScope = pendingChildHeads.shift();\r\n\r\n      while (currentScope) {\r\n        count += 1;\r\n        pendingChildHeads.push(currentScope.$$childHead);\r\n        currentScope = currentScope.$$nextSibling;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n\r\n  /**\r\n   * @ngdoc method\r\n   * @name $rootScope.Scope#$countWatchers\r\n   * @module ngMock\r\n   * @description\r\n   * Counts all the watchers of direct and indirect child scopes of the current scope.\r\n   *\r\n   * The watchers of the current scope are included in the count and so are all the watchers of\r\n   * isolate child scopes.\r\n   *\r\n   * @returns {number} Total number of watchers.\r\n   */\r\n  function countWatchers() {\r\n    // jshint validthis: true\r\n    var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope\r\n    var pendingChildHeads = [this.$$childHead];\r\n    var currentScope;\r\n\r\n    while (pendingChildHeads.length) {\r\n      currentScope = pendingChildHeads.shift();\r\n\r\n      while (currentScope) {\r\n        count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;\r\n        pendingChildHeads.push(currentScope.$$childHead);\r\n        currentScope = currentScope.$$nextSibling;\r\n      }\r\n    }\r\n\r\n    return count;\r\n  }\r\n}];\r\n\r\n\r\nif (window.jasmine || window.mocha) {\r\n\r\n  var currentSpec = null,\r\n      isSpecRunning = function() {\r\n        return !!currentSpec;\r\n      };\r\n\r\n\r\n  (window.beforeEach || window.setup)(function() {\r\n    currentSpec = this;\r\n  });\r\n\r\n  (window.afterEach || window.teardown)(function() {\r\n    var injector = currentSpec.$injector;\r\n\r\n    angular.forEach(currentSpec.$modules, function(module) {\r\n      if (module && module.$$hashKey) {\r\n        module.$$hashKey = undefined;\r\n      }\r\n    });\r\n\r\n    currentSpec.$injector = null;\r\n    currentSpec.$modules = null;\r\n    currentSpec = null;\r\n\r\n    if (injector) {\r\n      injector.get('$rootElement').off();\r\n      injector.get('$browser').pollFns.length = 0;\r\n    }\r\n\r\n    // clean up jquery's fragment cache\r\n    angular.forEach(angular.element.fragments, function(val, key) {\r\n      delete angular.element.fragments[key];\r\n    });\r\n\r\n    MockXhr.$$lastInstance = null;\r\n\r\n    angular.forEach(angular.callbacks, function(val, key) {\r\n      delete angular.callbacks[key];\r\n    });\r\n    angular.callbacks.counter = 0;\r\n  });\r\n\r\n  /**\r\n   * @ngdoc function\r\n   * @name angular.mock.module\r\n   * @description\r\n   *\r\n   * *NOTE*: This function is also published on window for easy access.<br>\r\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n   *\r\n   * This function registers a module configuration code. It collects the configuration information\r\n   * which will be used when the injector is created by {@link angular.mock.inject inject}.\r\n   *\r\n   * See {@link angular.mock.inject inject} for usage example\r\n   *\r\n   * @param {...(string|Function|Object)} fns any number of modules which are represented as string\r\n   *        aliases or as anonymous module initialization functions. The modules are used to\r\n   *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an\r\n   *        object literal is passed they will be registered as values in the module, the key being\r\n   *        the module name and the value being what is returned.\r\n   */\r\n  window.module = angular.mock.module = function() {\r\n    var moduleFns = Array.prototype.slice.call(arguments, 0);\r\n    return isSpecRunning() ? workFn() : workFn;\r\n    /////////////////////\r\n    function workFn() {\r\n      if (currentSpec.$injector) {\r\n        throw new Error('Injector already created, can not register a module!');\r\n      } else {\r\n        var modules = currentSpec.$modules || (currentSpec.$modules = []);\r\n        angular.forEach(moduleFns, function(module) {\r\n          if (angular.isObject(module) && !angular.isArray(module)) {\r\n            modules.push(function($provide) {\r\n              angular.forEach(module, function(value, key) {\r\n                $provide.value(key, value);\r\n              });\r\n            });\r\n          } else {\r\n            modules.push(module);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @ngdoc function\r\n   * @name angular.mock.inject\r\n   * @description\r\n   *\r\n   * *NOTE*: This function is also published on window for easy access.<br>\r\n   * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n   *\r\n   * The inject function wraps a function into an injectable function. The inject() creates new\r\n   * instance of {@link auto.$injector $injector} per test, which is then used for\r\n   * resolving references.\r\n   *\r\n   *\r\n   * ## Resolving References (Underscore Wrapping)\r\n   * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this\r\n   * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable\r\n   * that is declared in the scope of the `describe()` block. Since we would, most likely, want\r\n   * the variable to have the same name of the reference we have a problem, since the parameter\r\n   * to the `inject()` function would hide the outer variable.\r\n   *\r\n   * To help with this, the injected parameters can, optionally, be enclosed with underscores.\r\n   * These are ignored by the injector when the reference name is resolved.\r\n   *\r\n   * For example, the parameter `_myService_` would be resolved as the reference `myService`.\r\n   * Since it is available in the function body as _myService_, we can then assign it to a variable\r\n   * defined in an outer scope.\r\n   *\r\n   * ```\r\n   * // Defined out reference variable outside\r\n   * var myService;\r\n   *\r\n   * // Wrap the parameter in underscores\r\n   * beforeEach( inject( function(_myService_){\r\n   *   myService = _myService_;\r\n   * }));\r\n   *\r\n   * // Use myService in a series of tests.\r\n   * it('makes use of myService', function() {\r\n   *   myService.doStuff();\r\n   * });\r\n   *\r\n   * ```\r\n   *\r\n   * See also {@link angular.mock.module angular.mock.module}\r\n   *\r\n   * ## Example\r\n   * Example of what a typical jasmine tests looks like with the inject method.\r\n   * ```js\r\n   *\r\n   *   angular.module('myApplicationModule', [])\r\n   *       .value('mode', 'app')\r\n   *       .value('version', 'v1.0.1');\r\n   *\r\n   *\r\n   *   describe('MyApp', function() {\r\n   *\r\n   *     // You need to load modules that you want to test,\r\n   *     // it loads only the \"ng\" module by default.\r\n   *     beforeEach(module('myApplicationModule'));\r\n   *\r\n   *\r\n   *     // inject() is used to inject arguments of all given functions\r\n   *     it('should provide a version', inject(function(mode, version) {\r\n   *       expect(version).toEqual('v1.0.1');\r\n   *       expect(mode).toEqual('app');\r\n   *     }));\r\n   *\r\n   *\r\n   *     // The inject and module method can also be used inside of the it or beforeEach\r\n   *     it('should override a version and test the new version is injected', function() {\r\n   *       // module() takes functions or strings (module aliases)\r\n   *       module(function($provide) {\r\n   *         $provide.value('version', 'overridden'); // override version here\r\n   *       });\r\n   *\r\n   *       inject(function(version) {\r\n   *         expect(version).toEqual('overridden');\r\n   *       });\r\n   *     });\r\n   *   });\r\n   *\r\n   * ```\r\n   *\r\n   * @param {...Function} fns any number of functions which will be injected using the injector.\r\n   */\r\n\r\n\r\n\r\n  var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {\r\n    this.message = e.message;\r\n    this.name = e.name;\r\n    if (e.line) this.line = e.line;\r\n    if (e.sourceId) this.sourceId = e.sourceId;\r\n    if (e.stack && errorForStack)\r\n      this.stack = e.stack + '\\n' + errorForStack.stack;\r\n    if (e.stackArray) this.stackArray = e.stackArray;\r\n  };\r\n  ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;\r\n\r\n  window.inject = angular.mock.inject = function() {\r\n    var blockFns = Array.prototype.slice.call(arguments, 0);\r\n    var errorForStack = new Error('Declaration Location');\r\n    return isSpecRunning() ? workFn.call(currentSpec) : workFn;\r\n    /////////////////////\r\n    function workFn() {\r\n      var modules = currentSpec.$modules || [];\r\n      var strictDi = !!currentSpec.$injectorStrict;\r\n      modules.unshift('ngMock');\r\n      modules.unshift('ng');\r\n      var injector = currentSpec.$injector;\r\n      if (!injector) {\r\n        if (strictDi) {\r\n          // If strictDi is enabled, annotate the providerInjector blocks\r\n          angular.forEach(modules, function(moduleFn) {\r\n            if (typeof moduleFn === \"function\") {\r\n              angular.injector.$$annotate(moduleFn);\r\n            }\r\n          });\r\n        }\r\n        injector = currentSpec.$injector = angular.injector(modules, strictDi);\r\n        currentSpec.$injectorStrict = strictDi;\r\n      }\r\n      for (var i = 0, ii = blockFns.length; i < ii; i++) {\r\n        if (currentSpec.$injectorStrict) {\r\n          // If the injector is strict / strictDi, and the spec wants to inject using automatic\r\n          // annotation, then annotate the function here.\r\n          injector.annotate(blockFns[i]);\r\n        }\r\n        try {\r\n          /* jshint -W040 *//* Jasmine explicitly provides a `this` object when calling functions */\r\n          injector.invoke(blockFns[i] || angular.noop, this);\r\n          /* jshint +W040 */\r\n        } catch (e) {\r\n          if (e.stack && errorForStack) {\r\n            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);\r\n          }\r\n          throw e;\r\n        } finally {\r\n          errorForStack = null;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  angular.mock.inject.strictDi = function(value) {\r\n    value = arguments.length ? !!value : true;\r\n    return isSpecRunning() ? workFn() : workFn;\r\n\r\n    function workFn() {\r\n      if (value !== currentSpec.$injectorStrict) {\r\n        if (currentSpec.$injector) {\r\n          throw new Error('Injector already created, can not modify strict annotations');\r\n        } else {\r\n          currentSpec.$injectorStrict = value;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\n\r\n})(window, window.angular);",
    "var root = this;\r\n\r\nroot.context = root.describe;\r\nroot.xcontext = root.xdescribe;\r\n",
    "\r\n/*\r\njasmine-fixture 1.0.5\r\nMakes injecting HTML snippets into the DOM easy & clean!\r\nsite: https://github.com/searls/jasmine-fixture\r\n*/\r\n\r\n\r\n(function() {\r\n  var createHTMLBlock;\r\n\r\n  (function($) {\r\n    var jasmineFixture, originalAffix, originalInject, originalJasmineFixture, root, _;\r\n    root = this;\r\n    originalJasmineFixture = root.jasmineFixture;\r\n    originalInject = root.inject;\r\n    originalAffix = root.affix;\r\n    _ = function(list) {\r\n      return {\r\n        inject: function(iterator, memo) {\r\n          var item, _i, _len, _results;\r\n          _results = [];\r\n          for (_i = 0, _len = list.length; _i < _len; _i++) {\r\n            item = list[_i];\r\n            _results.push(memo = iterator(memo, item));\r\n          }\r\n          return _results;\r\n        }\r\n      };\r\n    };\r\n    root.jasmineFixture = function($) {\r\n      var $whatsTheRootOf, applyAttributes, defaultConfiguration, defaults, init, injectContents, isReady, isString, itLooksLikeHtml, rootId, tidyUp;\r\n      $.fn.affix = root.affix = function(selectorOptions) {\r\n        var $top;\r\n        $top = null;\r\n        _(selectorOptions.split(/[ ](?=[^\\]]*?(?:\\[|$))/)).inject(function($parent, elementSelector) {\r\n          var $el;\r\n          if (elementSelector === \">\") {\r\n            return $parent;\r\n          }\r\n          $el = createHTMLBlock($, elementSelector).appendTo($parent);\r\n          $top || ($top = $el);\r\n          return $el;\r\n        }, $whatsTheRootOf(this));\r\n        return $top;\r\n      };\r\n      $whatsTheRootOf = function(that) {\r\n        if (that.jquery != null) {\r\n          return that;\r\n        } else if ($('#jasmine_content').length > 0) {\r\n          return $('#jasmine_content');\r\n        } else {\r\n          return $('<div id=\"jasmine_content\"></div>').appendTo('body');\r\n        }\r\n      };\r\n      afterEach(function() {\r\n        return $('#jasmine_content').remove();\r\n      });\r\n      isReady = false;\r\n      rootId = \"specContainer\";\r\n      defaultConfiguration = {\r\n        el: \"div\",\r\n        cssClass: \"\",\r\n        id: \"\",\r\n        text: \"\",\r\n        html: \"\",\r\n        defaultAttribute: \"class\",\r\n        attrs: {}\r\n      };\r\n      defaults = $.extend({}, defaultConfiguration);\r\n      $.jasmine = {\r\n        inject: function(arg, context) {\r\n          var $toInject, config, parent;\r\n          if (isReady !== true) {\r\n            init();\r\n          }\r\n          parent = (context ? context : $(\"#\" + rootId));\r\n          $toInject = void 0;\r\n          if (itLooksLikeHtml(arg)) {\r\n            $toInject = $(arg);\r\n          } else {\r\n            config = $.extend({}, defaults, arg, {\r\n              userString: arg\r\n            });\r\n            $toInject = $(\"<\" + config.el + \"></\" + config.el + \">\");\r\n            applyAttributes($toInject, config);\r\n            injectContents($toInject, config);\r\n          }\r\n          return $toInject.appendTo(parent);\r\n        },\r\n        configure: function(config) {\r\n          return $.extend(defaults, config);\r\n        },\r\n        restoreDefaults: function() {\r\n          return defaults = $.extend({}, defaultConfiguration);\r\n        },\r\n        noConflict: function() {\r\n          root.jasmineFixture = originalJasmineFixture;\r\n          root.inject = originalInject;\r\n          root.affix = originalAffix;\r\n          return this;\r\n        }\r\n      };\r\n      $.fn.inject = function(html) {\r\n        return $.jasmine.inject(html, $(this));\r\n      };\r\n      applyAttributes = function($html, config) {\r\n        var attrs, key, _results;\r\n        attrs = $.extend({}, {\r\n          id: config.id,\r\n          \"class\": config[\"class\"] || config.cssClass\r\n        }, config.attrs);\r\n        if (isString(config.userString)) {\r\n          attrs[config.defaultAttribute] = config.userString;\r\n        }\r\n        _results = [];\r\n        for (key in attrs) {\r\n          if (attrs[key]) {\r\n            _results.push($html.attr(key, attrs[key]));\r\n          } else {\r\n            _results.push(void 0);\r\n          }\r\n        }\r\n        return _results;\r\n      };\r\n      injectContents = function($el, config) {\r\n        if (config.text && config.html) {\r\n          throw \"Error: because they conflict, you may only configure inject() to set `html` or `text`, not both! \\n\\nHTML was: \" + config.html + \" \\n\\n Text was: \" + config.text;\r\n        } else if (config.text) {\r\n          return $el.text(config.text);\r\n        } else {\r\n          if (config.html) {\r\n            return $el.html(config.html);\r\n          }\r\n        }\r\n      };\r\n      itLooksLikeHtml = function(arg) {\r\n        return isString(arg) && arg.indexOf(\"<\") !== -1;\r\n      };\r\n      isString = function(arg) {\r\n        return arg && arg.constructor === String;\r\n      };\r\n      init = function() {\r\n        $(\"body\").append(\"<div id=\\\"\" + rootId + \"\\\"></div>\");\r\n        return isReady = true;\r\n      };\r\n      tidyUp = function() {\r\n        $(\"#\" + rootId).remove();\r\n        return isReady = false;\r\n      };\r\n      $(function($) {\r\n        return init();\r\n      });\r\n      afterEach(function() {\r\n        return tidyUp();\r\n      });\r\n      return $.jasmine;\r\n    };\r\n    if ($) {\r\n      jasmineFixture = root.jasmineFixture($);\r\n      return root.inject = root.inject || jasmineFixture.inject;\r\n    }\r\n  })(window.jQuery);\r\n\r\n  createHTMLBlock = (function() {\r\n    var bindData, bindEvents, parseAttributes, parseClasses, parseContents, parseEnclosure, parseReferences, parseVariableScope, regAttr, regAttrDfn, regAttrs, regCBrace, regClass, regClasses, regData, regDatas, regEvent, regEvents, regExclamation, regId, regReference, regTag, regTagNotContent, regZenTagDfn;\r\n    createHTMLBlock = function($, ZenObject, data, functions, indexes) {\r\n      var ZenCode, arr, block, blockAttrs, blockClasses, blockHTML, blockId, blockTag, blocks, el, el2, els, forScope, indexName, inner, len, obj, origZenCode, paren, result, ret, zc, zo;\r\n      if ($.isPlainObject(ZenObject)) {\r\n        ZenCode = ZenObject.main;\r\n      } else {\r\n        ZenCode = ZenObject;\r\n        ZenObject = {\r\n          main: ZenCode\r\n        };\r\n      }\r\n      origZenCode = ZenCode;\r\n      if (indexes === undefined) {\r\n        indexes = {};\r\n      }\r\n      if (ZenCode.charAt(0) === \"!\" || $.isArray(data)) {\r\n        if ($.isArray(data)) {\r\n          forScope = ZenCode;\r\n        } else {\r\n          obj = parseEnclosure(ZenCode, \"!\");\r\n          obj = obj.substring(obj.indexOf(\":\") + 1, obj.length - 1);\r\n          forScope = parseVariableScope(ZenCode);\r\n        }\r\n        while (forScope.charAt(0) === \"@\") {\r\n          forScope = parseVariableScope(\"!for:!\" + parseReferences(forScope, ZenObject));\r\n        }\r\n        zo = ZenObject;\r\n        zo.main = forScope;\r\n        el = $();\r\n        if (ZenCode.substring(0, 5) === \"!for:\" || $.isArray(data)) {\r\n          if (!$.isArray(data) && obj.indexOf(\":\") > 0) {\r\n            indexName = obj.substring(0, obj.indexOf(\":\"));\r\n            obj = obj.substr(obj.indexOf(\":\") + 1);\r\n          }\r\n          arr = ($.isArray(data) ? data : data[obj]);\r\n          zc = zo.main;\r\n          if ($.isArray(arr) || $.isPlainObject(arr)) {\r\n            $.map(arr, function(value, index) {\r\n              var next;\r\n              zo.main = zc;\r\n              if (indexName !== undefined) {\r\n                indexes[indexName] = index;\r\n              }\r\n              if (!$.isPlainObject(value)) {\r\n                value = {\r\n                  value: value\r\n                };\r\n              }\r\n              next = createHTMLBlock($, zo, value, functions, indexes);\r\n              if (el.length !== 0) {\r\n                return $.each(next, function(index, value) {\r\n                  return el.push(value);\r\n                });\r\n              }\r\n            });\r\n          }\r\n          if (!$.isArray(data)) {\r\n            ZenCode = ZenCode.substr(obj.length + 6 + forScope.length);\r\n          } else {\r\n            ZenCode = \"\";\r\n          }\r\n        } else if (ZenCode.substring(0, 4) === \"!if:\") {\r\n          result = parseContents(\"!\" + obj + \"!\", data, indexes);\r\n          if (result !== \"undefined\" || result !== \"false\" || result !== \"\") {\r\n            el = createHTMLBlock($, zo, data, functions, indexes);\r\n          }\r\n          ZenCode = ZenCode.substr(obj.length + 5 + forScope.length);\r\n        }\r\n        ZenObject.main = ZenCode;\r\n      } else if (ZenCode.charAt(0) === \"(\") {\r\n        paren = parseEnclosure(ZenCode, \"(\", \")\");\r\n        inner = paren.substring(1, paren.length - 1);\r\n        ZenCode = ZenCode.substr(paren.length);\r\n        zo = ZenObject;\r\n        zo.main = inner;\r\n        el = createHTMLBlock($, zo, data, functions, indexes);\r\n      } else {\r\n        blocks = ZenCode.match(regZenTagDfn);\r\n        block = blocks[0];\r\n        if (block.length === 0) {\r\n          return \"\";\r\n        }\r\n        if (block.indexOf(\"@\") >= 0) {\r\n          ZenCode = parseReferences(ZenCode, ZenObject);\r\n          zo = ZenObject;\r\n          zo.main = ZenCode;\r\n          return createHTMLBlock($, zo, data, functions, indexes);\r\n        }\r\n        block = parseContents(block, data, indexes);\r\n        blockClasses = parseClasses($, block);\r\n        if (regId.test(block)) {\r\n          blockId = regId.exec(block)[1];\r\n        }\r\n        blockAttrs = parseAttributes(block, data);\r\n        blockTag = (block.charAt(0) === \"{\" ? \"span\" : \"div\");\r\n        if (ZenCode.charAt(0) !== \"#\" && ZenCode.charAt(0) !== \".\" && ZenCode.charAt(0) !== \"{\") {\r\n          blockTag = regTag.exec(block)[1];\r\n        }\r\n        if (block.search(regCBrace) !== -1) {\r\n          blockHTML = block.match(regCBrace)[1];\r\n        }\r\n        blockAttrs = $.extend(blockAttrs, {\r\n          id: blockId,\r\n          \"class\": blockClasses,\r\n          html: blockHTML\r\n        });\r\n        el = $(\"<\" + blockTag + \">\", blockAttrs);\r\n        el.attr(blockAttrs);\r\n        el = bindEvents(block, el, functions);\r\n        el = bindData(block, el, data);\r\n        ZenCode = ZenCode.substr(blocks[0].length);\r\n        ZenObject.main = ZenCode;\r\n      }\r\n      if (ZenCode.length > 0) {\r\n        if (ZenCode.charAt(0) === \">\") {\r\n          if (ZenCode.charAt(1) === \"(\") {\r\n            zc = parseEnclosure(ZenCode.substr(1), \"(\", \")\");\r\n            ZenCode = ZenCode.substr(zc.length + 1);\r\n          } else if (ZenCode.charAt(1) === \"!\") {\r\n            obj = parseEnclosure(ZenCode.substr(1), \"!\");\r\n            forScope = parseVariableScope(ZenCode.substr(1));\r\n            zc = obj + forScope;\r\n            ZenCode = ZenCode.substr(zc.length + 1);\r\n          } else {\r\n            len = Math.max(ZenCode.indexOf(\"+\"), ZenCode.length);\r\n            zc = ZenCode.substring(1, len);\r\n            ZenCode = ZenCode.substr(len);\r\n          }\r\n          zo = ZenObject;\r\n          zo.main = zc;\r\n          els = $(createHTMLBlock($, zo, data, functions, indexes));\r\n          els.appendTo(el);\r\n        }\r\n        if (ZenCode.charAt(0) === \"+\") {\r\n          zo = ZenObject;\r\n          zo.main = ZenCode.substr(1);\r\n          el2 = createHTMLBlock($, zo, data, functions, indexes);\r\n          $.each(el2, function(index, value) {\r\n            return el.push(value);\r\n          });\r\n        }\r\n      }\r\n      ret = el;\r\n      return ret;\r\n    };\r\n    bindData = function(ZenCode, el, data) {\r\n      var datas, i, split;\r\n      if (ZenCode.search(regDatas) === 0) {\r\n        return el;\r\n      }\r\n      datas = ZenCode.match(regDatas);\r\n      if (datas === null) {\r\n        return el;\r\n      }\r\n      i = 0;\r\n      while (i < datas.length) {\r\n        split = regData.exec(datas[i]);\r\n        if (split[3] === undefined) {\r\n          $(el).data(split[1], data[split[1]]);\r\n        } else {\r\n          $(el).data(split[1], data[split[3]]);\r\n        }\r\n        i++;\r\n      }\r\n      return el;\r\n    };\r\n    bindEvents = function(ZenCode, el, functions) {\r\n      var bindings, fn, i, split;\r\n      if (ZenCode.search(regEvents) === 0) {\r\n        return el;\r\n      }\r\n      bindings = ZenCode.match(regEvents);\r\n      if (bindings === null) {\r\n        return el;\r\n      }\r\n      i = 0;\r\n      while (i < bindings.length) {\r\n        split = regEvent.exec(bindings[i]);\r\n        if (split[2] === undefined) {\r\n          fn = functions[split[1]];\r\n        } else {\r\n          fn = functions[split[2]];\r\n        }\r\n        $(el).bind(split[1], fn);\r\n        i++;\r\n      }\r\n      return el;\r\n    };\r\n    parseAttributes = function(ZenBlock, data) {\r\n      var attrStrs, attrs, i, parts;\r\n      if (ZenBlock.search(regAttrDfn) === -1) {\r\n        return undefined;\r\n      }\r\n      attrStrs = ZenBlock.match(regAttrDfn);\r\n      attrs = {};\r\n      i = 0;\r\n      while (i < attrStrs.length) {\r\n        parts = regAttr.exec(attrStrs[i]);\r\n        attrs[parts[1]] = \"\";\r\n        if (parts[3] !== undefined) {\r\n          attrs[parts[1]] = parseContents(parts[3], data);\r\n        }\r\n        i++;\r\n      }\r\n      return attrs;\r\n    };\r\n    parseClasses = function($, ZenBlock) {\r\n      var classes, clsString, i;\r\n      ZenBlock = ZenBlock.match(regTagNotContent)[0];\r\n      if (ZenBlock.search(regClasses) === -1) {\r\n        return undefined;\r\n      }\r\n      classes = ZenBlock.match(regClasses);\r\n      clsString = \"\";\r\n      i = 0;\r\n      while (i < classes.length) {\r\n        clsString += \" \" + regClass.exec(classes[i])[1];\r\n        i++;\r\n      }\r\n      return $.trim(clsString);\r\n    };\r\n    parseContents = function(ZenBlock, data, indexes) {\r\n      var html;\r\n      if (indexes === undefined) {\r\n        indexes = {};\r\n      }\r\n      html = ZenBlock;\r\n      if (data === undefined) {\r\n        return html;\r\n      }\r\n      while (regExclamation.test(html)) {\r\n        html = html.replace(regExclamation, function(str, str2) {\r\n          var begChar, fn, val;\r\n          begChar = \"\";\r\n          if (str.indexOf(\"!for:\") > 0 || str.indexOf(\"!if:\") > 0) {\r\n            return str;\r\n          }\r\n          if (str.charAt(0) !== \"!\") {\r\n            begChar = str.charAt(0);\r\n            str = str.substring(2, str.length - 1);\r\n          }\r\n          fn = new Function(\"data\", \"indexes\", \"var r=undefined;\" + \"with(data){try{r=\" + str + \";}catch(e){}}\" + \"with(indexes){try{if(r===undefined)r=\" + str + \";}catch(e){}}\" + \"return r;\");\r\n          val = unescape(fn(data, indexes));\r\n          return begChar + val;\r\n        });\r\n      }\r\n      html = html.replace(/\\\\./g, function(str) {\r\n        return str.charAt(1);\r\n      });\r\n      return unescape(html);\r\n    };\r\n    parseEnclosure = function(ZenCode, open, close, count) {\r\n      var index, ret;\r\n      if (close === undefined) {\r\n        close = open;\r\n      }\r\n      index = 1;\r\n      if (count === undefined) {\r\n        count = (ZenCode.charAt(0) === open ? 1 : 0);\r\n      }\r\n      if (count === 0) {\r\n        return;\r\n      }\r\n      while (count > 0 && index < ZenCode.length) {\r\n        if (ZenCode.charAt(index) === close && ZenCode.charAt(index - 1) !== \"\\\\\") {\r\n          count--;\r\n        } else {\r\n          if (ZenCode.charAt(index) === open && ZenCode.charAt(index - 1) !== \"\\\\\") {\r\n            count++;\r\n          }\r\n        }\r\n        index++;\r\n      }\r\n      ret = ZenCode.substring(0, index);\r\n      return ret;\r\n    };\r\n    parseReferences = function(ZenCode, ZenObject) {\r\n      ZenCode = ZenCode.replace(regReference, function(str) {\r\n        var fn;\r\n        str = str.substr(1);\r\n        fn = new Function(\"objs\", \"var r=\\\"\\\";\" + \"with(objs){try{\" + \"r=\" + str + \";\" + \"}catch(e){}}\" + \"return r;\");\r\n        return fn(ZenObject, parseReferences);\r\n      });\r\n      return ZenCode;\r\n    };\r\n    parseVariableScope = function(ZenCode) {\r\n      var forCode, rest, tag;\r\n      if (ZenCode.substring(0, 5) !== \"!for:\" && ZenCode.substring(0, 4) !== \"!if:\") {\r\n        return undefined;\r\n      }\r\n      forCode = parseEnclosure(ZenCode, \"!\");\r\n      ZenCode = ZenCode.substr(forCode.length);\r\n      if (ZenCode.charAt(0) === \"(\") {\r\n        return parseEnclosure(ZenCode, \"(\", \")\");\r\n      }\r\n      tag = ZenCode.match(regZenTagDfn)[0];\r\n      ZenCode = ZenCode.substr(tag.length);\r\n      if (ZenCode.length === 0 || ZenCode.charAt(0) === \"+\") {\r\n        return tag;\r\n      } else if (ZenCode.charAt(0) === \">\") {\r\n        rest = \"\";\r\n        rest = parseEnclosure(ZenCode.substr(1), \"(\", \")\", 1);\r\n        return tag + \">\" + rest;\r\n      }\r\n      return undefined;\r\n    };\r\n    regZenTagDfn = /([#\\.\\@]?[\\w-]+|\\[([\\w-!?=:\"']+(=\"([^\"]|\\\\\")+\")? {0,})+\\]|\\~[\\w$]+=[\\w$]+|&[\\w$]+(=[\\w$]+)?|[#\\.\\@]?!([^!]|\\\\!)+!){0,}(\\{([^\\}]|\\\\\\})+\\})?/i;\r\n    regTag = /(\\w+)/i;\r\n    regId = /#([\\w-!]+)/i;\r\n    regTagNotContent = /((([#\\.]?[\\w-]+)?(\\[([\\w!]+(=\"([^\"]|\\\\\")+\")? {0,})+\\])?)+)/i;\r\n    regClasses = /(\\.[\\w-]+)/g;\r\n    regClass = /\\.([\\w-]+)/i;\r\n    regReference = /(@[\\w$_][\\w$_\\d]+)/i;\r\n    regAttrDfn = /(\\[([\\w-!]+(=\"?([^\"]|\\\\\")+\"?)? {0,})+\\])/ig;\r\n    regAttrs = /([\\w-!]+(=\"([^\"]|\\\\\")+\")?)/g;\r\n    regAttr = /([\\w-!]+)(=\"?(([^\"\\]]|\\\\\")+)\"?)?/i;\r\n    regCBrace = /\\{(([^\\}]|\\\\\\})+)\\}/i;\r\n    regExclamation = /(?:([^\\\\]|^))!([^!]|\\\\!)+!/g;\r\n    regEvents = /\\~[\\w$]+(=[\\w$]+)?/g;\r\n    regEvent = /\\~([\\w$]+)=([\\w$]+)/i;\r\n    regDatas = /&[\\w$]+(=[\\w$]+)?/g;\r\n    regData = /&([\\w$]+)(=([\\w$]+))?/i;\r\n    return createHTMLBlock;\r\n  })();\r\n\r\n}).call(this);\r\n",
    "/* jasmine-given - 2.4.0\r\n * Adds a Given-When-Then DSL to jasmine as an alternative style for specs\r\n * https://github.com/searls/jasmine-given\r\n */\r\n(function() {\r\n  (function(jasmine) {\r\n    var additionalInsightsForErrorMessage, apparentReferenceError, attemptedEquality, comparisonInsight, declareJasmineSpec, deepEqualsNotice, doneWrapperFor, evalInContextOfSpec, finalStatementFrom, getBlock, invariantList, mostRecentExpectations, mostRecentlyUsed, o, root, stringifyExpectation, wasComparison, whenList;\r\n    mostRecentlyUsed = null;\r\n    beforeEach(function() {\r\n      return this.addMatchers(jasmine._given.matchers);\r\n    });\r\n    root = this;\r\n    root.Given = function() {\r\n      mostRecentlyUsed = root.Given;\r\n      return beforeEach(getBlock(arguments));\r\n    };\r\n    whenList = [];\r\n    root.When = function() {\r\n      var b;\r\n      mostRecentlyUsed = root.When;\r\n      b = getBlock(arguments);\r\n      beforeEach(function() {\r\n        return whenList.push(b);\r\n      });\r\n      return afterEach(function() {\r\n        return whenList.pop();\r\n      });\r\n    };\r\n    invariantList = [];\r\n    root.Invariant = function(invariantBehavior) {\r\n      mostRecentlyUsed = root.Invariant;\r\n      beforeEach(function() {\r\n        return invariantList.push(invariantBehavior);\r\n      });\r\n      return afterEach(function() {\r\n        return invariantList.pop();\r\n      });\r\n    };\r\n    getBlock = function(thing) {\r\n      var assignResultTo, setupFunction;\r\n      setupFunction = o(thing).firstThat(function(arg) {\r\n        return o(arg).isFunction();\r\n      });\r\n      assignResultTo = o(thing).firstThat(function(arg) {\r\n        return o(arg).isString();\r\n      });\r\n      return doneWrapperFor(setupFunction, function(done) {\r\n        var context, result;\r\n        context = jasmine.getEnv().currentSpec;\r\n        result = setupFunction.call(context, done);\r\n        if (assignResultTo) {\r\n          if (!context[assignResultTo]) {\r\n            return context[assignResultTo] = result;\r\n          } else {\r\n            throw new Error(\"Unfortunately, the variable '\" + assignResultTo + \"' is already assigned to: \" + context[assignResultTo]);\r\n          }\r\n        }\r\n      });\r\n    };\r\n    mostRecentExpectations = null;\r\n    declareJasmineSpec = function(specArgs, itFunction) {\r\n      var expectationFunction, expectations, label;\r\n      if (itFunction == null) {\r\n        itFunction = it;\r\n      }\r\n      label = o(specArgs).firstThat(function(arg) {\r\n        return o(arg).isString();\r\n      });\r\n      expectationFunction = o(specArgs).firstThat(function(arg) {\r\n        return o(arg).isFunction();\r\n      });\r\n      mostRecentlyUsed = root.subsequentThen;\r\n      mostRecentExpectations = expectations = [expectationFunction];\r\n      itFunction(\"then \" + (label != null ? label : stringifyExpectation(expectations)), doneWrapperFor(expectationFunction, function(done) {\r\n        var block, expectation, i, _i, _j, _len, _len1, _ref, _ref1, _results;\r\n        _ref = whenList != null ? whenList : [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          block = _ref[_i];\r\n          block();\r\n        }\r\n        _ref1 = invariantList.concat(expectations);\r\n        _results = [];\r\n        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {\r\n          expectation = _ref1[i];\r\n          _results.push(expect(expectation).not.toHaveReturnedFalseFromThen(jasmine.getEnv().currentSpec, i + 1, done));\r\n        }\r\n        return _results;\r\n      }));\r\n      return {\r\n        Then: subsequentThen,\r\n        And: subsequentThen\r\n      };\r\n    };\r\n    doneWrapperFor = function(func, toWrap) {\r\n      if (func.length === 0) {\r\n        return function() {\r\n          return toWrap();\r\n        };\r\n      } else {\r\n        return function(done) {\r\n          return toWrap(done);\r\n        };\r\n      }\r\n    };\r\n    root.Then = function() {\r\n      return declareJasmineSpec(arguments);\r\n    };\r\n    root.Then.only = function() {\r\n      return declareJasmineSpec(arguments, it.only);\r\n    };\r\n    root.subsequentThen = function(additionalExpectation) {\r\n      mostRecentExpectations.push(additionalExpectation);\r\n      return this;\r\n    };\r\n    mostRecentlyUsed = root.Given;\r\n    root.And = function() {\r\n      return mostRecentlyUsed.apply(this, jasmine.util.argsToArray(arguments));\r\n    };\r\n    o = function(thing) {\r\n      return {\r\n        isFunction: function() {\r\n          return Object.prototype.toString.call(thing) === \"[object Function]\";\r\n        },\r\n        isString: function() {\r\n          return Object.prototype.toString.call(thing) === \"[object String]\";\r\n        },\r\n        firstThat: function(test) {\r\n          var i;\r\n          i = 0;\r\n          while (i < thing.length) {\r\n            if (test(thing[i]) === true) {\r\n              return thing[i];\r\n            }\r\n            i++;\r\n          }\r\n          return void 0;\r\n        }\r\n      };\r\n    };\r\n    jasmine._given = {\r\n      matchers: {\r\n        toHaveReturnedFalseFromThen: function(context, n, done) {\r\n          var e, exception, result;\r\n          result = false;\r\n          exception = void 0;\r\n          try {\r\n            result = this.actual.call(context, done);\r\n          } catch (_error) {\r\n            e = _error;\r\n            exception = e;\r\n          }\r\n          this.message = function() {\r\n            var msg, stringyExpectation;\r\n            stringyExpectation = stringifyExpectation(this.actual);\r\n            msg = \"Then clause\" + (n > 1 ? \" #\" + n : \"\") + \" `\" + stringyExpectation + \"` failed by \";\r\n            if (exception) {\r\n              msg += \"throwing: \" + exception.toString();\r\n            } else {\r\n              msg += \"returning false\";\r\n            }\r\n            msg += additionalInsightsForErrorMessage(stringyExpectation);\r\n            return msg;\r\n          };\r\n          return result === false;\r\n        }\r\n      }\r\n    };\r\n    stringifyExpectation = function(expectation) {\r\n      var matches;\r\n      matches = expectation.toString().replace(/\\n/g, '').match(/function\\s?\\(.*\\)\\s?{\\s*(return\\s+)?(.*?)(;)?\\s*}/i);\r\n      if (matches && matches.length >= 3) {\r\n        return matches[2].replace(/\\s+/g, ' ');\r\n      } else {\r\n        return \"\";\r\n      }\r\n    };\r\n    additionalInsightsForErrorMessage = function(expectationString) {\r\n      var comparison, expectation;\r\n      expectation = finalStatementFrom(expectationString);\r\n      if (comparison = wasComparison(expectation)) {\r\n        return comparisonInsight(expectation, comparison);\r\n      } else {\r\n        return \"\";\r\n      }\r\n    };\r\n    finalStatementFrom = function(expectationString) {\r\n      var multiStatement;\r\n      if (multiStatement = expectationString.match(/.*return (.*)/)) {\r\n        return multiStatement[multiStatement.length - 1];\r\n      } else {\r\n        return expectationString;\r\n      }\r\n    };\r\n    wasComparison = function(expectation) {\r\n      var comparator, comparison, left, right, s;\r\n      if (comparison = expectation.match(/(.*) (===|!==|==|!=|>|>=|<|<=) (.*)/)) {\r\n        s = comparison[0], left = comparison[1], comparator = comparison[2], right = comparison[3];\r\n        return {\r\n          left: left,\r\n          comparator: comparator,\r\n          right: right\r\n        };\r\n      }\r\n    };\r\n    comparisonInsight = function(expectation, comparison) {\r\n      var left, msg, right;\r\n      left = evalInContextOfSpec(comparison.left);\r\n      right = evalInContextOfSpec(comparison.right);\r\n      if (apparentReferenceError(left) && apparentReferenceError(right)) {\r\n        return \"\";\r\n      }\r\n      msg = \"\\n\\nThis comparison was detected:\\n  \" + expectation + \"\\n  \" + left + \" \" + comparison.comparator + \" \" + right;\r\n      if (attemptedEquality(left, right, comparison.comparator)) {\r\n        msg += \"\\n\\n\" + (deepEqualsNotice(comparison.left, comparison.right));\r\n      }\r\n      return msg;\r\n    };\r\n    apparentReferenceError = function(result) {\r\n      return /^<Error: \"ReferenceError/.test(result);\r\n    };\r\n    evalInContextOfSpec = function(operand) {\r\n      var e;\r\n      try {\r\n        return (function() {\r\n          return eval(operand);\r\n        }).call(jasmine.getEnv().currentSpec);\r\n      } catch (_error) {\r\n        e = _error;\r\n        return \"<Error: \\\"\" + ((e != null ? typeof e.message === \"function\" ? e.message() : void 0 : void 0) || e) + \"\\\">\";\r\n      }\r\n    };\r\n    attemptedEquality = function(left, right, comparator) {\r\n      return (comparator === \"==\" || comparator === \"===\") && jasmine.getEnv().equals_(left, right);\r\n    };\r\n    return deepEqualsNotice = function(left, right) {\r\n      return \"However, these items are deeply equal! Try an expectation like this instead:\\n  expect(\" + left + \").toEqual(\" + right + \")\";\r\n    };\r\n  })(jasmine);\r\n\r\n}).call(this);\r\n",
    "/* jasmine-only - 0.1.0\r\n * Exclusivity spec helpers for jasmine: `describe.only` and `it.only`\r\n * https://github.com/davemo/jasmine-only\r\n */\r\n(function() {\r\n  var __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  (function(jasmine) {\r\n    var describeOnly, env, itOnly, root;\r\n\r\n    root = this;\r\n    env = jasmine.getEnv();\r\n    describeOnly = function(description, specDefinitions) {\r\n      var suite;\r\n\r\n      suite = new jasmine.Suite(this, description, null, this.currentSuite);\r\n      suite.exclusive_ = 1;\r\n      this.exclusive_ = Math.max(this.exclusive_, 1);\r\n      return this.describe_(suite, specDefinitions);\r\n    };\r\n    itOnly = function(description, func) {\r\n      var spec;\r\n\r\n      spec = this.it(description, func);\r\n      spec.exclusive_ = 2;\r\n      this.exclusive_ = 2;\r\n      return spec;\r\n    };\r\n    env.exclusive_ = 0;\r\n    env.describe = function(description, specDefinitions) {\r\n      var suite;\r\n\r\n      suite = new jasmine.Suite(this, description, null, this.currentSuite);\r\n      return this.describe_(suite, specDefinitions);\r\n    };\r\n    env.describe_ = function(suite, specDefinitions) {\r\n      var declarationError, e, parentSuite;\r\n\r\n      parentSuite = this.currentSuite;\r\n      if (parentSuite) {\r\n        parentSuite.add(suite);\r\n      } else {\r\n        this.currentRunner_.add(suite);\r\n      }\r\n      this.currentSuite = suite;\r\n      declarationError = null;\r\n      try {\r\n        specDefinitions.call(suite);\r\n      } catch (_error) {\r\n        e = _error;\r\n        declarationError = e;\r\n      }\r\n      if (declarationError) {\r\n        this.it(\"encountered a declaration exception\", function() {\r\n          throw declarationError;\r\n        });\r\n      }\r\n      this.currentSuite = parentSuite;\r\n      return suite;\r\n    };\r\n    env.specFilter = function(spec) {\r\n      return this.exclusive_ <= spec.exclusive_;\r\n    };\r\n    env.describe.only = function() {\r\n      return describeOnly.apply(env, arguments);\r\n    };\r\n    env.it.only = function() {\r\n      return itOnly.apply(env, arguments);\r\n    };\r\n    root.describe.only = function(description, specDefinitions) {\r\n      return env.describe.only(description, specDefinitions);\r\n    };\r\n    root.it.only = function(description, func) {\r\n      return env.it.only(description, func);\r\n    };\r\n    root.iit = root.it.only;\r\n    root.ddescribe = root.describe.only;\r\n    jasmine.Spec = (function(_super) {\r\n      __extends(Spec, _super);\r\n\r\n      function Spec(env, suite, description) {\r\n        this.exclusive_ = suite.exclusive_;\r\n        Spec.__super__.constructor.call(this, env, suite, description);\r\n      }\r\n\r\n      return Spec;\r\n\r\n    })(jasmine.Spec);\r\n    return jasmine.Suite = (function(_super) {\r\n      __extends(Suite, _super);\r\n\r\n      function Suite(env, suite, specDefinitions, parentSuite) {\r\n        this.exclusive_ = parentSuite && parentSuite.exclusive_ || 0;\r\n        Suite.__super__.constructor.call(this, env, suite, specDefinitions, parentSuite);\r\n      }\r\n\r\n      return Suite;\r\n\r\n    })(jasmine.Suite);\r\n  })(jasmine);\r\n\r\n}).call(this);\r\n",
    "/* jasmine-stealth - 0.0.13\r\n * Makes Jasmine spies a bit more robust\r\n * https://github.com/searls/jasmine-stealth\r\n */\r\n(function() {\r\n  var Captor, fake, root, stubChainer, unfakes, whatToDoWhenTheSpyGetsCalled, _,\r\n    __hasProp = {}.hasOwnProperty,\r\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\r\n\r\n  root = this;\r\n\r\n  _ = function(obj) {\r\n    return {\r\n      each: function(iterator) {\r\n        var item, _i, _len, _results;\r\n        _results = [];\r\n        for (_i = 0, _len = obj.length; _i < _len; _i++) {\r\n          item = obj[_i];\r\n          _results.push(iterator(item));\r\n        }\r\n        return _results;\r\n      },\r\n      isFunction: function() {\r\n        return Object.prototype.toString.call(obj) === \"[object Function]\";\r\n      },\r\n      isString: function() {\r\n        return Object.prototype.toString.call(obj) === \"[object String]\";\r\n      }\r\n    };\r\n  };\r\n\r\n  root.spyOnConstructor = function(owner, classToFake, methodsToSpy) {\r\n    var fakeClass, spies;\r\n    if (methodsToSpy == null) {\r\n      methodsToSpy = [];\r\n    }\r\n    if (_(methodsToSpy).isString()) {\r\n      methodsToSpy = [methodsToSpy];\r\n    }\r\n    spies = {\r\n      constructor: jasmine.createSpy(\"\" + classToFake + \"'s constructor\")\r\n    };\r\n    fakeClass = (function() {\r\n      function _Class() {\r\n        spies.constructor.apply(this, arguments);\r\n      }\r\n\r\n      return _Class;\r\n\r\n    })();\r\n    _(methodsToSpy).each(function(methodName) {\r\n      spies[methodName] = jasmine.createSpy(\"\" + classToFake + \"#\" + methodName);\r\n      return fakeClass.prototype[methodName] = function() {\r\n        return spies[methodName].apply(this, arguments);\r\n      };\r\n    });\r\n    fake(owner, classToFake, fakeClass);\r\n    return spies;\r\n  };\r\n\r\n  unfakes = [];\r\n\r\n  afterEach(function() {\r\n    _(unfakes).each(function(u) {\r\n      return u();\r\n    });\r\n    return unfakes = [];\r\n  });\r\n\r\n  fake = function(owner, thingToFake, newThing) {\r\n    var originalThing;\r\n    originalThing = owner[thingToFake];\r\n    owner[thingToFake] = newThing;\r\n    return unfakes.push(function() {\r\n      return owner[thingToFake] = originalThing;\r\n    });\r\n  };\r\n\r\n  root.stubFor = root.spyOn;\r\n\r\n  jasmine.createStub = jasmine.createSpy;\r\n\r\n  jasmine.createStubObj = function(baseName, stubbings) {\r\n    var name, obj, stubbing;\r\n    if (stubbings.constructor === Array) {\r\n      return jasmine.createSpyObj(baseName, stubbings);\r\n    } else {\r\n      obj = {};\r\n      for (name in stubbings) {\r\n        stubbing = stubbings[name];\r\n        obj[name] = jasmine.createSpy(baseName + \".\" + name);\r\n        if (_(stubbing).isFunction()) {\r\n          obj[name].andCallFake(stubbing);\r\n        } else {\r\n          obj[name].andReturn(stubbing);\r\n        }\r\n      }\r\n      return obj;\r\n    }\r\n  };\r\n\r\n  whatToDoWhenTheSpyGetsCalled = function(spy) {\r\n    var matchesStub, priorStubbing;\r\n    matchesStub = function(stubbing, args, context) {\r\n      switch (stubbing.type) {\r\n        case \"args\":\r\n          return jasmine.getEnv().equals_(stubbing.ifThis, jasmine.util.argsToArray(args));\r\n        case \"context\":\r\n          return jasmine.getEnv().equals_(stubbing.ifThis, context);\r\n      }\r\n    };\r\n    priorStubbing = spy.plan();\r\n    return spy.andCallFake(function() {\r\n      var i, stubbing;\r\n      i = 0;\r\n      while (i < spy._stealth_stubbings.length) {\r\n        stubbing = spy._stealth_stubbings[i];\r\n        if (matchesStub(stubbing, arguments, this)) {\r\n          if (stubbing.satisfaction === \"callFake\") {\r\n            return stubbing.thenThat.apply(stubbing, arguments);\r\n          } else {\r\n            return stubbing.thenThat;\r\n          }\r\n        }\r\n        i++;\r\n      }\r\n      return priorStubbing;\r\n    });\r\n  };\r\n\r\n  jasmine.Spy.prototype.whenContext = function(context) {\r\n    var spy;\r\n    spy = this;\r\n    spy._stealth_stubbings || (spy._stealth_stubbings = []);\r\n    whatToDoWhenTheSpyGetsCalled(spy);\r\n    return stubChainer(spy, \"context\", context);\r\n  };\r\n\r\n  jasmine.Spy.prototype.when = function() {\r\n    var ifThis, spy;\r\n    spy = this;\r\n    ifThis = jasmine.util.argsToArray(arguments);\r\n    spy._stealth_stubbings || (spy._stealth_stubbings = []);\r\n    whatToDoWhenTheSpyGetsCalled(spy);\r\n    return stubChainer(spy, \"args\", ifThis);\r\n  };\r\n\r\n  stubChainer = function(spy, type, ifThis) {\r\n    var addStubbing;\r\n    addStubbing = function(satisfaction) {\r\n      return function(thenThat) {\r\n        spy._stealth_stubbings.push({\r\n          type: type,\r\n          ifThis: ifThis,\r\n          satisfaction: satisfaction,\r\n          thenThat: thenThat\r\n        });\r\n        return spy;\r\n      };\r\n    };\r\n    return {\r\n      thenReturn: addStubbing(\"return\"),\r\n      thenCallFake: addStubbing(\"callFake\")\r\n    };\r\n  };\r\n\r\n  jasmine.Spy.prototype.mostRecentCallThat = function(callThat, context) {\r\n    var i;\r\n    i = this.calls.length - 1;\r\n    while (i >= 0) {\r\n      if (callThat.call(context || this, this.calls[i]) === true) {\r\n        return this.calls[i];\r\n      }\r\n      i--;\r\n    }\r\n  };\r\n\r\n  jasmine.Matchers.ArgThat = (function(_super) {\r\n    __extends(ArgThat, _super);\r\n\r\n    function ArgThat(matcher) {\r\n      this.matcher = matcher;\r\n    }\r\n\r\n    ArgThat.prototype.jasmineMatches = function(actual) {\r\n      return this.matcher(actual);\r\n    };\r\n\r\n    return ArgThat;\r\n\r\n  })(jasmine.Matchers.Any);\r\n\r\n  jasmine.Matchers.ArgThat.prototype.matches = jasmine.Matchers.ArgThat.prototype.jasmineMatches;\r\n\r\n  jasmine.argThat = function(expected) {\r\n    return new jasmine.Matchers.ArgThat(expected);\r\n  };\r\n\r\n  jasmine.Matchers.Capture = (function(_super) {\r\n    __extends(Capture, _super);\r\n\r\n    function Capture(captor) {\r\n      this.captor = captor;\r\n    }\r\n\r\n    Capture.prototype.jasmineMatches = function(actual) {\r\n      this.captor.value = actual;\r\n      return true;\r\n    };\r\n\r\n    return Capture;\r\n\r\n  })(jasmine.Matchers.Any);\r\n\r\n  jasmine.Matchers.Capture.prototype.matches = jasmine.Matchers.Capture.prototype.jasmineMatches;\r\n\r\n  Captor = (function() {\r\n    function Captor() {}\r\n\r\n    Captor.prototype.capture = function() {\r\n      return new jasmine.Matchers.Capture(this);\r\n    };\r\n\r\n    return Captor;\r\n\r\n  })();\r\n\r\n  jasmine.captor = function() {\r\n    return new Captor();\r\n  };\r\n\r\n}).call(this);\r\n",
    "describe(\"controller: LoginController ($httpBackend.expect().respond, vanilla jasmine, javascript)\", function() {\r\n\r\n  beforeEach(function() {\r\n    module(\"app\");\r\n  });\r\n\r\n  beforeEach(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\r\n    this.$location = $location;\r\n    this.$httpBackend = $httpBackend;\r\n    this.scope = $rootScope.$new();\r\n    this.redirect = spyOn($location, 'path');\r\n    $controller('LoginController', {\r\n      $scope: this.scope,\r\n      $location: $location,\r\n      AuthenticationService: AuthenticationService\r\n    });\r\n  }));\r\n\r\n  afterEach(function() {\r\n    this.$httpBackend.verifyNoOutstandingRequest();\r\n    this.$httpBackend.verifyNoOutstandingExpectation();\r\n  });\r\n\r\n  describe(\"successfully logging in\", function() {\r\n    it(\"should redirect you to /home\", function() {\r\n      this.$httpBackend.expectPOST('/login', this.scope.credentials).respond(200);\r\n      this.scope.login();\r\n      this.$httpBackend.flush();\r\n      expect(this.redirect).toHaveBeenCalledWith('/home');\r\n    });\r\n  });\r\n});\r\n",
    "describe(\"directive: shows-message-when-hovered (vanilla jasmine, coffeescript)\", function() {\r\n\r\n  beforeEach(function() {\r\n    module(\"app\");\r\n  });\r\n\r\n  beforeEach(inject(function($rootScope, $compile) {\r\n    this.directiveMessage = 'ralph was here';\r\n    this.html = \"<div shows-message-when-hovered message='\" + this.directiveMessage + \"'></div>\";\r\n    this.scope = $rootScope.$new();\r\n    this.scope.message = this.originalMessage = 'things are looking grim';\r\n    this.elem = $compile(this.html)(this.scope);\r\n  }));\r\n\r\n  describe(\"when a user mouses over the element\", function() {\r\n    it(\"sets the message on the scope to the message attribute of the element\", function() {\r\n      this.elem.triggerHandler('mouseenter');\r\n      expect(this.scope.message).toBe(this.directiveMessage);\r\n    });\r\n  });\r\n\r\n  describe(\"when a users mouse leaves the element\", function() {\r\n    it(\"restores the message to the original\", function() {\r\n      this.elem.triggerHandler('mouseleave');\r\n      expect(this.scope.message).toBe(this.originalMessage);\r\n    });\r\n  });\r\n\r\n});\r\n",
    "(function() {\n  describe(\"controller: LoginController ($httpBackend.when().respond, jasmine-given, coffeescript)\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\n      this.$httpBackend = $httpBackend;\n      this.scope = $rootScope.$new();\n      this.redirect = spyOn($location, 'path');\n      return $controller('LoginController', {\n        $scope: this.scope,\n        $location: $location,\n        AuthenticationService: AuthenticationService\n      });\n    }));\n    Invariant(function() {\n      this.$httpBackend.verifyNoOutstandingRequest();\n      return this.$httpBackend.verifyNoOutstandingExpectation();\n    });\n    return describe(\"when a user successfully logs in\", function() {\n      Given(function() {\n        return this.$httpBackend.whenPOST('/login', this.scope.credentials).respond(200);\n      });\n      When(function() {\n        return this.scope.login();\n      });\n      When(function() {\n        return this.$httpBackend.flush();\n      });\n      return Then(\"LoginController should redirect you to /home\", function() {\n        return expect(this.redirect).toHaveBeenCalledWith('/home');\n      });\n    });\n  });\n\n}).call(this);\n\r\n(function() {\n  describe(\"controller: LoginController ($httpBackend.expect().respond, vanilla jasmine, coffeescript)\", function() {\n    beforeEach(function() {\n      return module(\"app\");\n    });\n    beforeEach(inject(function($controller, $rootScope, $location, AuthenticationService, $httpBackend) {\n      this.$location = $location;\n      this.$httpBackend = $httpBackend;\n      this.scope = $rootScope.$new();\n      this.redirect = spyOn($location, 'path');\n      return $controller('LoginController', {\n        $scope: this.scope,\n        $location: $location,\n        AuthenticationService: AuthenticationService\n      });\n    }));\n    afterEach(function() {\n      this.$httpBackend.verifyNoOutstandingRequest();\n      return this.$httpBackend.verifyNoOutstandingExpectation();\n    });\n    return describe(\"successfully logging in\", function() {\n      return it(\"should redirect you to /home\", function() {\n        this.$httpBackend.expectPOST('/login', this.scope.credentials).respond(200);\n        this.scope.login();\n        this.$httpBackend.flush();\n        return expect(this.redirect).toHaveBeenCalledWith('/home');\n      });\n    });\n  });\n\n}).call(this);\n\r\n(function() {\n  describe(\"directive: shows-message-when-hovered (jasmine-given, coffeescript)\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(inject(function($rootScope, $compile) {\n      this.directiveMessage = 'ralph was here';\n      this.html = \"<div shows-message-when-hovered message='\" + this.directiveMessage + \"'></div>\";\n      this.scope = $rootScope.$new();\n      this.scope.message = this.originalMessage = 'things are looking grim';\n      return this.elem = $compile(this.html)(this.scope);\n    }));\n    describe(\"when a user mouses over the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseenter');\n      });\n      return Then(\"the message on the scope is set to the message attribute of the element\", function() {\n        return this.scope.message === this.directiveMessage;\n      });\n    });\n    return describe(\"when a users mouse leaves the element\", function() {\n      When(function() {\n        return this.elem.triggerHandler('mouseleave');\n      });\n      return Then(\"the message is reset to the original message\", function() {\n        return this.scope.message === this.originalMessage;\n      });\n    });\n  });\n\n}).call(this);\n\r\n(function() {\n  describe(\"service: AuthenticationService\", function() {\n    Given(function() {\n      return module(\"app\");\n    });\n    Given(function() {\n      var _this = this;\n      return inject(function($http, AuthenticationService) {\n        _this.AuthenticationService = AuthenticationService;\n        _this.$httpPost = spyOn($http, 'post');\n        return _this.$httpGet = spyOn($http, 'get');\n      });\n    });\n    describe(\"#login\", function() {\n      Given(function() {\n        return this.credentials = {\n          name: 'Dave'\n        };\n      });\n      When(function() {\n        return this.AuthenticationService.login(this.credentials);\n      });\n      return Then(function() {\n        return expect(this.$httpPost).toHaveBeenCalledWith('/login', this.credentials);\n      });\n    });\n    return describe(\"#logout\", function() {\n      When(function() {\n        return this.AuthenticationService.logout();\n      });\n      return Then(function() {\n        return expect(this.$httpPost).toHaveBeenCalledWith('/logout');\n      });\n    });\n  });\n\n}).call(this);\n"
  ]
}